 A. これまでの進捗（STEP1～11-8）
 1. パッケージ化（pyproject.toml, setup.py）  
 2. DIによるコンポーネント分離  
 3. YAML＋click CLI 化  
 4. バックテスト／最適化エンジン実装  
 5. ウォークフォワード自動化  
 6. 結果可視化＆安定度判定  
 7. テスト＆CI整備 (pytest, flake8, black, isort + GitHub Actions)  
 8. バックテスト本体機能＋ユニットテスト拡充  
 9. ライブ＆ペーパー取引用プラットフォーム構築  
   9-1. MarketDataFetcher の WebSocket 対応 → 完了  
   9-2. ExecutionEngine の再接続・リトライ (tenacity) → 完了 + pytest 動作検証  
   9-3. Testnet(Bybit)連携 & 統合テスト → 完了  
       ・CCXT ベースの BybitTestnetClient (`crypto_bot/execution/bybit_client.py`)  
       ・`.env` 自動読み込み対応 (python-dotenv)  
       ・`.env.example` 更新  
       ・E2E テスト (`tests/integration/test_bybit_e2e.py`)  
       ・`run_e2e.sh` スクリプト追加  
   9-4. CIワークフローに統合テストジョブ追加 → 完了  
       ・実行ジョブ名: integration-tests  
       ・Secrets: BYBIT_TESTNET_API_KEY, BYBIT_TESTNET_API_SECRET  
10.テストカバレッジ強化（新規ユニットテスト追加）
   10-1. backtest/metrics.py テスト強化 → 完了
   10-2. data/fetcher.py（ISO文字列・datetime対応／ページネーション） → 完了
   10-3. scripts/walk_forward.py（単体テスト） → 完了
   10-4. backtest/engine.EntryExit（generate_entry/exit/fill） → 完了
   10-5. execution/engine.ExecutionEngine（基本動作） → 完了
   10-6. execution/engine.ExecutionEngine（リトライ機構） → 完了
11.機械学習ベース戦略への拡張
   11-1. 特徴量パイプライン構築 (crypto_bot/ml/preprocessor.py + テスト) → 完了
   11-2. scikit-learn モデルラッパー作成 (crypto_bot/ml/model.py) + CLI “train” コマンド実装 & 単体テスト(test_model.py, test_main_train.py) → 完了
   11-3. Optuna 等によるハイパーパラ最適化 → 完了
   11-4. モデルタイプ切替対応 (lgbm/rf/xgb) & CLI/テスト修正 → 完了
   11-5. Note記事(n8abec619923f)のバックテスト結果表示コード移植
	      •	詳細レポート（各トレード指標）出力機能を実装・動作確認 → 完了
   11-6. pyproject.toml に Black/Isort/Pytest設定を追加 → 完了
   11‑7‑1. トレード履歴のエクスポート＆集計 → 完了
   11-7-2. パフォーマンス指標の可視化 → 完了
   11−7−3. 閾値（threshold）のチューニング(閾値スイープ実行 (threshold_sweep.csv 出力)) → 完了
   11-7-4. モデル最適化＆再学習 (optimize-and-train → ml.model_params 反映) → 完了
   11-7-5. 再ROC/PR 曲線評価 & バックテスト比較レポート生成 → 完了
   11-8. モデルキャリブレーション → 完了
   11-9. 過学習チェック＆ウォークフォワードテスト → 完了
   11-10.自動パイプラインのエラー修正中　→ 完了

12.マルチ取引所対応フレームワーク整備  
   12-1. 共通インターフェイス定義 (Protocol／抽象クラス) → 完了
   12-2. 各取引所アダプタ実装 → 完了
      – CCXT 対応：Bybit  / Bitbank / Bitflyer / OKCoinJP / …
   12-3. Factory/DI 化 → 完了
      – create_exchange_client(exchange_id) で選択的インスタンス生成
   12-4. 既存コードの切り替え → 完了
      – MarketDataFetcher, ExecutionEngine, main.py の生 CCXT 呼び出し→factory経由へ
   12-5. 新規モジュールのユニットテスト追加 → 完了
      – create_exchange_client のマッピングテスト
      – MarketDataFetcher.get_price_df の fetcherテスト
      – 各 ExchangeClient 実装のインターフェイス検証
   12-6. テスト雛形/.env.example整理 → 完了

B. 今後のロードマップ  

 STEP13：Docker化＆CI/CD拡充  
  13-1. Dockerfile 作成 & イメージビルド → 完了
  13-2. Dockerでの実行・テスト確認　　　→ 完了
  13-3. GitHub リポジトリ運用 + GitHub Actions 導入 → 未了
  13-4. 自動ビルド→レジストリ（Docker Hub/ECR）→ステージング/本番デプロイ → 未了

 STEP14：本番環境構築  
  14-1. AWS EC2/ECS/Fargate 等の選定と起動 → 未了
  14-2. 仮想環境 or Docker 上でのデプロイスクリプト整備 → 未了
  14-3. IaC（Terraform/CloudFormation）による構成管理 → 未了
  14-4. ログ・モニタリング (CloudWatch, Prometheus + Grafana など) → 未了

 STEP15：拡張・改善項目  
  15-1. マルチ戦略サポート（プラグイン化） → 未了
  15-2. マルチリージョン冗長化 / HA 化 → 未了
  15-3. GitHub でのコードレビュー＆Issue 管理 → 未了
  15-4. Kubernetes（EKS/ECS）への移行 → 未了
  15-5. オンライントレーニング導入 → 未了
  15-6.[勝率向上タスク]
	•	(a) 新テクニカル指標追加 (RSI, MACD, ストキャスティクスなど)
	•	(b) モデルアンサンブル/スタッキング
	•	(c) 動的閾値調整 (ATR連動)
	•	(d) ポジションサイズ戦略 (Kelly, 連勝連敗調整)
	•	(e) ターゲット定義見直し (多次元/閾値固定から条件付き)
	•	(f) コスト・スリッページモデル学習
	•	(g) 自動ワークフォローによる閾値/パラメータ最適化
	•	(h) リアルタイム適応学習 & ドリフト検知
	•	(i) ストレステスト & 信頼区間評価
	•	(j) リアルタイムアラート＆自動停止
	•	(k) 過学習抑制・高度化（旧11-10）
         •	データ分割/クロスバリデーション（TimeSeriesSplit/K-Fold/Walk Forwardなど）
         •	特徴量エンジニアリング（高相関/未来情報の除去・重要度可視化・不要特徴量削減）
         •	モデル正則化・アンサンブル最適化
         •	ハイパーパラメータ広域チューニング・早期停止（Optuna, GridSearchCV）
         •	モデルキャリブレーション（Platt Scaling, Isotonic Regression）
         •	本番想定テストセット評価・過学習監視指標の拡充（CAGR, Sharpe, DD等）
         •	モデル/学習パラメータ/再現性のバージョン管理強化（MLflow, DVC等）
	•	(l) リアルタイムシミュレーション（旧11-11）
         •	ペーパー取引/少額実弾の24h自動運用・ログ＆パフォーマンス自動記録
         •	異常検知・自動アラート（損失超過時のBot停止等）
         •	モデルの自動再トレーニング/再デプロイ・パフォーマンス乖離自動監視

STEP16：マルチ取引所の本格運用対応・API仕様/テスト更新
   16-1. 本当に運用したい取引所のAPI仕様アップデート対応
   　- 取引所APIの仕様変更、バージョン更新時の追従
   　- 実際に注文・出金・銘柄追加などの「実運用上の課題」に合わせて柔軟にコード・テスト・ドキュメントを随時アップデート
   16-2. 各取引所integrationテストの本実装
   　- 雛形に実処理を埋め込み、実際の残高・取引・注文キャンセルなどを安全に検証
   　- 必要なタイミングでのみAPIキー設定＆実行
   16-3. 「使うときだけ最小単位でテスト→本番利用」フロー確立
   　- APIキー/注文量/テスト内容の記録とドキュメント管理

C. CI/CD／Lint／Format／テスト環境  
 1. checks.sh  
    - flake8, isort, black, pytest+coverage（term-missing/html, fail-under=75%）  
 2. .github/workflows/ci.yml  
    - jobs: test (matrix Python3.8–3.12)  
    - jobs: integration-tests (needs: test, Bybit Testnet E2E)  
 3. requirements-dev.txt  
    - pytest, pytest-cov, pytest-asyncio
    - flake8系, black, isort, pydocstyle, pre-commit
    - coverage, codecov, websockets, tenacity, ccxt, pybit, python-dotenv
    - optuna, scikit-learn, lightgbm, xgboost
    - tox, ipython, ipdb