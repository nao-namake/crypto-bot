(1)requirements-dev.txt の中身
# requirements-dev.txt

# テストフレームワーク
pytest>=7.0.0
pytest-cov>=4.0.0

# 非同期テスト
pytest-asyncio>=0.20.0

# 静的解析・型チェック
flake8>=6.0.0
flake8-bugbear>=23.0.0
flake8-docstrings>=1.7.0
mypy>=1.4.0

# フォーマッタ & インポートソート
black>=24.3.0
isort>=5.12.0

# ドキュメントスタイル(docstringチェック)
pydocstyle>=6.2.0

# Git Hooks 等の自動化
pre-commit>=3.4.0

# CI/カバレッジ
coverage>=7.0.0
codecov>=2.0.0

# リアルタイムストリーミング
websockets>=11.0.0

# リトライ機構（ExecutionEngine 等の再接続用）
tenacity>=8.2.0

# 取引所接続用ライブラリ
ccxt>=2.10.0
pybit>=1.5.6

# dotenv (.env の自動読み込み用)
python-dotenv>=1.0.0

# コンテナ／仮想環境検証（任意）
tox>=4.8.0

# 開発補助（任意）
ipython>=8.0.0
ipdb>=0.13.0

（２）config/default.yml　の中身
# ───────────────────────────────
# データ取得設定
# ───────────────────────────────
data:
  # CCXT の exchange 名（bybit, binance, okx…）
  exchange: bybit

  # 環境変数または here に直接書いてもOK
  api_key: ${BYBIT_TESTNET_API_KEY}
  api_secret: ${BYBIT_TESTNET_API_SECRET}

  # 対象シンボル・時間足
  symbol: BTC/USDT
  timeframe: 1h

  # 取得開始日(ISO8601)／総レコード数／ページング設定
  since: '2022-01-01T00:00:00Z'
  limit: 3000
  paginate: true
  per_page: 500

# ───────────────────────────────
# 戦略設定（Bollinger Band）
# ───────────────────────────────
strategy:
  name: Bollinger
  params:
    period: 20
    nbdev: 2.0

# ───────────────────────────────
# リスク管理設定
# ───────────────────────────────
risk:
  risk_per_trade: 0.01
  stop_atr_mult: 1.5

# ───────────────────────────────
# バックテスト設定
# ───────────────────────────────
backtest:
  starting_balance: 10000.0
  slippage_rate: 0.001

# ───────────────────────────────
# 最適化設定
# ───────────────────────────────
optimizer:
  periods: [10, 20, 30]
  nbdevs:  [1.5, 2.0, 2.5]
  parallel: true
  max_workers: 4

# ───────────────────────────────
# ウォークフォワード設定
# ───────────────────────────────
walk_forward:
  train_window: 500
  test_window: 100
  step: 100

# ───────────────────────────────
# 機械学習（STEP10～）用設定
# ───────────────────────────────
ml:
  # テクニカル指標計算などで使うローリング期間
  feat_period: 14

  # ラグ特徴を何本分作るか
  lags: [1, 2, 3, 5, 10]

  # 移動統計量(window)の期間
  rolling_window: 20

  # 予測ホライズン（N 期間後）
  horizon: 5

  # 分類ターゲット閾値(return > threshold → up=1)
  threshold: 0.0

（３）pyproject.toml の中身
[tool.black]
line-length = 88

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
# テスト対象のディレクトリ
testpaths = ["tests"]

# テストファイル名のパターン
# - 通常のユニットテスト: test_*.py
# - E2E テスト: *_e2e.py
python_files = ["test_*.py", "*_e2e.py"]

# asyncio 用のデフォルト fixture loop scope を function に固定
asyncio_default_fixture_loop_scope = "function"

# pandas の 'H' deprecated 警告を抑制
filterwarnings = [
  "ignore:'H' is deprecated and will be removed in a future version.*:FutureWarning"
]

（４）run_e2e.sh　の中身
#!/usr/bin/env bash
set -euo pipefail

# スクリプトのあるディレクトリへ移動
cd "$(cd "$(dirname "$0")" && pwd)"

# .venv があればアクティベート
if [ -f .venv/bin/activate ]; then
  source .venv/bin/activate
fi

# — STEP 1) 環境変数読み込み —
if [ -f .env ] && { [ -z "${BYBIT_TESTNET_API_KEY:-}" ] || [ -z "${BYBIT_TESTNET_API_SECRET:-}" ]; }; then
  echo "→ Loading .env file"
  set -a
  source .env
  set +a
fi

# 最終チェック
if [ -z "${BYBIT_TESTNET_API_KEY:-}" ] || [ -z "${BYBIT_TESTNET_API_SECRET:-}" ]; then
  echo "❌ BYBIT_TESTNET_API_KEY/SECRET not set"
  exit 1
fi

echo "→ BYBIT_TESTNET_API_KEY=${BYBIT_TESTNET_API_KEY:0:4}****"
echo "→ BYBIT_TESTNET_API_SECRET=${BYBIT_TESTNET_API_SECRET:0:4}****"

# — STEP 2) E2E テスト実行 —
# ここでファイル名を直接指定 or ワイルドカードで展開
pytest tests/integration/test_*.py -q

（５）setup.py　の中身
from setuptools import find_packages, setup

setup(
    name="crypto_bot",
    version="0.1.0",
    description="汎用暗号資産トレーディングボット",
    packages=find_packages(include=["crypto_bot", "crypto_bot.*"]),
    python_requires=">=3.8",
    install_requires=[
        # データ操作
        "pandas>=2.0.0",
        "numpy>=1.24.0",
        # 設定読み込み
        "PyYAML>=6.0.0",
        # 取引所接続
        "ccxt>=2.10.0",
        # リアルタイムストリーミング
        "websockets>=11.0.0",
        # リトライ
        "tenacity>=8.2.0",
        # .env 自動読み込み
        "python-dotenv>=1.0.0",
        # CLI
        "click>=8.0.0",
        # 必要なら setuptools-scm など
    ],
)

(6).github/workflows/ci.yml　の中身
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Lint & Format Checks
        run: |
          flake8 crypto_bot tests
          black --check crypto_bot tests
          isort --check-only crypto_bot tests

      - name: Run unit tests & collect coverage
        run: pytest --maxfail=1 --disable-warnings -q --cov=crypto_bot

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    name: Bybit Testnet E2E
    needs: test
    if: ${{ secrets.BYBIT_TESTNET_API_KEY && secrets.BYBIT_TESTNET_API_SECRET }}
    runs-on: ubuntu-latest
    env:
      BYBIT_TESTNET_API_KEY: ${{ secrets.BYBIT_TESTNET_API_KEY }}
      BYBIT_TESTNET_API_SECRET: ${{ secrets.BYBIT_TESTNET_API_SECRET }}
    steps:
      - uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Make run_e2e.sh executable
        run: chmod +x run_e2e.sh

      - name: Run Bybit E2E
        run: ./run_e2e.sh

各モジュールの中身です。指示は次のコメントですので、これも覚えておいて下さい。