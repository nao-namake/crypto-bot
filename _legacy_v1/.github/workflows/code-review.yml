# =============================================================================
# .github/workflows/code-review.yml
#   - PR時のコードレビュー支援ワークフロー
#   - 自動的なコード品質チェックとレビューコメント
# =============================================================================
name: Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得してdiffを正しく計算

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-review-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run code quality checks
        run: |
          echo "## 📊 Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Flake8 チェック
          echo "### 🔍 Flake8 Results" >> $GITHUB_STEP_SUMMARY
          if flake8 crypto_bot tests --exit-zero --format='%(path)s:%(row)d:%(col)d: %(code)s %(text)s' > flake8_results.txt; then
            if [ -s flake8_results.txt ]; then
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat flake8_results.txt >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No flake8 issues found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Flake8 check failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Check test coverage
        run: |
          # カバレッジ情報を取得
          pytest tests/unit --cov=crypto_bot --cov-report=term-missing --cov-report=json --cov-fail-under=70 || echo "Coverage check completed"
          
          # カバレッジ結果をサマリーに追加
          echo "### 📈 Test Coverage" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage.json ]; then
            COVERAGE=$(python -c "import json; data=json.load(open('coverage.json')); print(f'{data[\"totals\"][\"percent_covered\"]:.1f}%')")
            echo "**Overall Coverage:** $COVERAGE" >> $GITHUB_STEP_SUMMARY
            
            # カバレッジが70%未満の場合は警告
            COVERAGE_NUM=$(python -c "import json; data=json.load(open('coverage.json')); print(data['totals']['percent_covered'])")
            if (( $(echo "$COVERAGE_NUM < 70" | bc -l) )); then
              echo "⚠️ **Warning:** Coverage is below 70% threshold" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ Coverage meets 70% threshold" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Coverage report not generated" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

  # ────────────────────────────────────────────────────────────────────────────
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          echo "### 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Bandit でセキュリティ問題をチェック
          if bandit -r crypto_bot -f json -o bandit_results.json --exit-zero; then
            # 結果を解析してサマリーに追加
            python -c "
import json
import sys

try:
    with open('bandit_results.json', 'r') as f:
        data = json.load(f)
    
    high_issues = [r for r in data.get('results', []) if r.get('issue_severity') == 'HIGH']
    medium_issues = [r for r in data.get('results', []) if r.get('issue_severity') == 'MEDIUM']
    low_issues = [r for r in data.get('results', []) if r.get('issue_severity') == 'LOW']
    
    print(f'**High:** {len(high_issues)} issues')
    print(f'**Medium:** {len(medium_issues)} issues') 
    print(f'**Low:** {len(low_issues)} issues')
    
    if high_issues:
        print('\\n**High Severity Issues:**')
        for issue in high_issues[:5]:  # 最初の5件のみ表示
            print(f'- {issue[\"filename\"]}:{issue[\"line_number\"]} {issue[\"issue_text\"]}')
            
    if len(high_issues) == 0 and len(medium_issues) == 0:
        print('\\n✅ No critical security issues found')
except Exception as e:
    print(f'❌ Failed to parse bandit results: {e}')
" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Bandit scan failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Check for known vulnerabilities
        run: |
          echo "### 🛡️ Dependency Vulnerability Check" >> $GITHUB_STEP_SUMMARY
          if safety check --json > safety_results.json 2>/dev/null || true; then
            python -c "
import json
import sys

try:
    with open('safety_results.json', 'r') as f:
        data = json.load(f)
    
    vulnerabilities = data.get('vulnerabilities', [])
    if vulnerabilities:
        print(f'⚠️ Found {len(vulnerabilities)} known vulnerabilities:')
        for vuln in vulnerabilities[:5]:  # 最初の5件のみ表示
            print(f'- {vuln[\"package_name\"]} {vuln[\"installed_version\"]}: {vuln[\"vulnerability_id\"]}')
    else:
        print('✅ No known vulnerabilities found in dependencies')
except Exception as e:
    print('✅ No known vulnerabilities found in dependencies')
" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No known vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
          fi

  # ────────────────────────────────────────────────────────────────────────────
  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install radon

      - name: Analyze code complexity
        run: |
          echo "### 📊 Code Complexity Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Cyclomatic Complexity
          echo "**Cyclomatic Complexity (files with complexity > 10):**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          radon cc crypto_bot -s -n B >> $GITHUB_STEP_SUMMARY || echo "No high complexity files found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Maintainability Index
          echo "**Maintainability Index (files with MI < 20):**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          radon mi crypto_bot -s -n B >> $GITHUB_STEP_SUMMARY || echo "All files have good maintainability" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # ────────────────────────────────────────────────────────────────────────────
  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        run: |
          # PRのサイズをチェック
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # 変更行数を計算
          ADDED_LINES=$(git diff --numstat $BASE_SHA..$HEAD_SHA | awk '{sum += $1} END {print sum}')
          DELETED_LINES=$(git diff --numstat $BASE_SHA..$HEAD_SHA | awk '{sum += $2} END {print sum}')
          CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA | wc -l)
          
          echo "### 📏 Pull Request Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed Files:** $CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
          echo "**Added Lines:** $ADDED_LINES" >> $GITHUB_STEP_SUMMARY
          echo "**Deleted Lines:** $DELETED_LINES" >> $GITHUB_STEP_SUMMARY
          echo "**Total Changes:** $((ADDED_LINES + DELETED_LINES))" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # サイズに基づく推奨事項
          TOTAL_CHANGES=$((ADDED_LINES + DELETED_LINES))
          if [ $TOTAL_CHANGES -gt 1000 ]; then
            echo "🔴 **Large PR Warning:** This PR contains $TOTAL_CHANGES changed lines. Consider breaking it into smaller PRs." >> $GITHUB_STEP_SUMMARY
          elif [ $TOTAL_CHANGES -gt 500 ]; then
            echo "🟡 **Medium PR:** This PR contains $TOTAL_CHANGES changed lines. Review carefully." >> $GITHUB_STEP_SUMMARY
          else
            echo "🟢 **Good PR Size:** This PR contains $TOTAL_CHANGES changed lines." >> $GITHUB_STEP_SUMMARY
          fi

  # ────────────────────────────────────────────────────────────────────────────
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check documentation updates
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # 変更されたPythonファイルを取得
          CHANGED_PY_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep '\.py$' | grep -v test_ | head -10)
          
          echo "### 📚 Documentation Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # README.mdやCLAUDE.mdが更新されているかチェック
          if git diff --name-only $BASE_SHA..$HEAD_SHA | grep -E "(README\.md|CLAUDE\.md)" > /dev/null; then
            echo "✅ Documentation files updated" >> $GITHUB_STEP_SUMMARY
          else
            if [ -n "$CHANGED_PY_FILES" ]; then
              echo "⚠️ **Consider updating documentation:** Python files were modified but no documentation updates detected" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Modified Python files:**" >> $GITHUB_STEP_SUMMARY
              for file in $CHANGED_PY_FILES; do
                echo "- $file" >> $GITHUB_STEP_SUMMARY
              done
            else
              echo "ℹ️ No Python files modified, documentation update not required" >> $GITHUB_STEP_SUMMARY
            fi
          fi