# Phase 12: GCP CI/CD統合設定ファイル
# 
# 全てのGCP関連設定を一元管理するための設定ファイル
# レガシーシステムのベストプラクティスを継承し、保守性を向上
#
# 使用方法:
#   - CI/CD環境変数の統一管理
#   - デプロイ設定の一元化
#   - 環境別設定の分離
#   - スクリプトからの設定読み込み

# ========================================
# 基本プロジェクト設定
# ========================================
project:
  id: "my-crypto-bot-project"
  number: ""  # 自動取得: $(gcloud projects describe ${PROJECT_ID} --format="value(projectNumber)")
  region: "asia-northeast1"
  zone: "asia-northeast1-a"

# ========================================
# GCP サービス設定
# ========================================
services:
  # Cloud Run設定
  cloud_run:
    service_name: "crypto-bot-service"
    region: "asia-northeast1"
    platform: "managed"
    
    # 段階的デプロイ設定
    deployment_stages:
      paper:
        suffix: ""
        memory: "1Gi"
        cpu: "1"
        min_instances: 0
        max_instances: 1
        timeout: 1800
        concurrency: 1
        description: "ペーパートレード（安全テスト）"
        
      stage_10:
        suffix: "-stage10"
        memory: "1Gi"
        cpu: "1"
        min_instances: 1
        max_instances: 1
        timeout: 1800
        concurrency: 1
        description: "10%資金投入モード"
        
      stage_50:
        suffix: "-stage50"
        memory: "1.5Gi"
        cpu: "1"
        min_instances: 1
        max_instances: 1
        timeout: 2400
        concurrency: 1
        description: "50%資金投入モード"
        
      live:
        suffix: "-prod"
        memory: "1Gi"
        cpu: "1"
        min_instances: 1
        max_instances: 2
        timeout: 3600
        concurrency: 1
        description: "100%本番モード（取引継続性重視）"

  # Artifact Registry設定
  artifact_registry:
    repository: "crypto-bot-repo"
    location: "asia-northeast1"
    format: "docker"
    description: "Phase 12: crypto-bot Docker images repository"
    
    # イメージ設定
    image:
      name: "crypto-bot"
      base_url: "asia-northeast1-docker.pkg.dev/my-crypto-bot-project/crypto-bot-repo"
      tags:
        - "latest"
        - "${GITHUB_SHA}"

  # Secret Manager設定
  secret_manager:
    secrets:
      - name: "bitbank-api-key"
        description: "Bitbank API キー"
        labels:
          managed-by: "crypto-bot"
          environment: "production"
          
      - name: "bitbank-api-secret"
        description: "Bitbank API シークレット"
        labels:
          managed-by: "crypto-bot"
          environment: "production"
          
      - name: "discord-webhook"
        description: "Discord Webhook URL"
        labels:
          managed-by: "crypto-bot"
          environment: "production"
          
      - name: "deploy-mode"
        description: "デプロイモード設定"
        labels:
          managed-by: "crypto-bot"
          type: "configuration"

# ========================================
# IAM・認証設定
# ========================================
iam:
  # GitHub Actions用サービスアカウント
  github_service_account:
    name: "github-actions-sa"
    display_name: "GitHub Actions Service Account"
    description: "Phase 12: CI/CD automation service account"
    
    # 必要な権限
    roles:
      - "roles/artifactregistry.writer"
      - "roles/run.developer"
      - "roles/secretmanager.secretAccessor"
      - "roles/logging.logWriter"
      - "roles/monitoring.editor"
      - "roles/cloudtrace.agent"
      - "roles/storage.objectViewer"

  # Workload Identity設定
  workload_identity:
    pool:
      id: "github-pool"
      display_name: "GitHub Actions Pool"
      description: "Phase 12: GitHub Actions用Workload Identity Pool"
      location: "global"
      
    provider:
      id: "github-provider"
      issuer_uri: "https://token.actions.githubusercontent.com"
      
      # 属性マッピング
      attribute_mapping:
        google.subject: "assertion.sub"
        attribute.actor: "assertion.actor"
        attribute.repository: "assertion.repository"
      
      # リポジトリ制限
      repository_filter: "nao-namake/crypto-bot"

# ========================================
# API設定
# ========================================
apis:
  required:
    - "cloudbuild.googleapis.com"
    - "run.googleapis.com"
    - "artifactregistry.googleapis.com"
    - "secretmanager.googleapis.com"
    - "iamcredentials.googleapis.com"
    - "sts.googleapis.com"
    - "logging.googleapis.com"
    - "monitoring.googleapis.com"
    - "cloudresourcemanager.googleapis.com"

# ========================================
# GitHub Actions設定
# ========================================
github_actions:
  # Repository Secrets（自動設定用）
  secrets:
    GCP_PROJECT_ID: "${project.id}"
    GCP_WIF_PROVIDER: "projects/${project.id}/locations/global/workloadIdentityPools/${iam.workload_identity.pool.id}/providers/${iam.workload_identity.provider.id}"
    GCP_SERVICE_ACCOUNT: "${iam.github_service_account.name}@${project.id}.iam.gserviceaccount.com"
    
  # Repository Variables
  variables:
    GCP_REGION: "${project.region}"
    ARTIFACT_REPOSITORY: "${services.artifact_registry.repository}"
    CLOUD_RUN_SERVICE: "${services.cloud_run.service_name}"

# ========================================
# 環境別設定
# ========================================
environments:
  development:
    project_suffix: "-dev"
    cloud_run:
      min_instances: 0
      max_instances: 1
    cost_optimization: true
    debug_mode: true
    
  staging:
    project_suffix: "-staging"
    cloud_run:
      min_instances: 0
      max_instances: 1
    cost_optimization: true
    debug_mode: false
    
  production:
    project_suffix: ""
    cloud_run:
      min_instances: 1  # レガシー学習: 取引継続性確保
      max_instances: 2
    cost_optimization: false
    debug_mode: false

# ========================================
# 監視・ログ設定
# ========================================
monitoring:
  # Cloud Logging設定
  logging:
    retention_days: 30
    log_level: "INFO"
    
    # ログフィルター
    filters:
      error_logs: 'severity>=ERROR'
      trading_logs: 'labels."component"="trading"'
      ci_logs: 'labels."component"="ci-cd"'
  
  # Cloud Monitoring設定
  metrics:
    # カスタムメトリクス
    custom_metrics:
      - name: "trading_signals_generated"
        description: "取引シグナル生成数"
        type: "counter"
        
      - name: "order_execution_latency"
        description: "注文実行レイテンシ"
        type: "histogram"
        
      - name: "api_error_rate"
        description: "API エラー率"
        type: "gauge"

  # アラート設定
  alerts:
    # Critical アラート
    critical:
      - name: "service_down"
        condition: "Cloud Run service unavailable"
        notification_channels: ["discord"]
        
      - name: "api_authentication_failure"
        condition: "Bitbank API authentication failed"
        notification_channels: ["discord"]
    
    # Warning アラート
    warning:
      - name: "high_error_rate"
        condition: "Error rate > 5%"
        notification_channels: ["discord"]
        
      - name: "slow_response_time"
        condition: "Response time > 3 seconds"
        notification_channels: ["discord"]

# ========================================
# デプロイメント設定
# ========================================
deployment:
  # デプロイ戦略
  strategy:
    type: "blue_green"  # ブルーグリーンデプロイ
    rollback_enabled: true
    health_check_timeout: 300
    
  # トラフィック分割設定
  traffic_splitting:
    paper: 
      new_revision: 100
      old_revision: 0
      
    stage_10:
      new_revision: 10
      old_revision: 90
      
    stage_50:
      new_revision: 50
      old_revision: 50
      
    live:
      new_revision: 100
      old_revision: 0

  # ヘルスチェック設定
  health_check:
    endpoint: "/health"
    initial_delay: 60
    timeout: 5
    interval: 30
    failure_threshold: 3
    success_threshold: 1

# ========================================
# セキュリティ設定
# ========================================
security:
  # Secret Manager設定
  secret_management:
    replication_policy: "automatic"
    automatic_rotation: false
    
  # Workload Identity設定
  workload_identity:
    attribute_conditions:
      repository_restriction: true
      branch_restriction: ["main"]
      
  # Cloud Run設定
  cloud_run_security:
    allow_unauthenticated: true  # 取引システムのため
    ingress: "all"
    egress: "all"

# ========================================
# コスト最適化設定
# ========================================
cost_optimization:
  # Cloud Run最適化
  cloud_run:
    cpu_throttling: false  # 取引システムのためfalse
    request_timeout: 3600  # 長時間処理対応
    
  # Artifact Registry最適化
  artifact_registry:
    cleanup_policy:
      keep_recent: 10
      keep_tagged: true
      
  # ログ最適化
  logging:
    retention_policy: "30_days"
    sampling_rate: 1.0

# ========================================
# レガシーシステム継承設定
# ========================================
legacy_compatibility:
  # レガシーから継承した重要設定
  inherited_settings:
    min_instances_1: "SIGTERM問題回避・取引継続性確保"
    memory_optimization: "1Gi設定で月額1,800円実績"
    timeout_extension: "長時間処理・取引完了待機対応"
    
  # レガシー改良点
  improvements:
    - "手動デプロイ → 自動CI/CD"
    - "単一環境 → 段階的デプロイ"
    - "手動監視 → 24時間自動監視"
    - "個別設定 → 統合設定管理"

# ========================================
# バージョン・メタデータ
# ========================================
metadata:
  version: "12.0.0"
  created_date: "2025-08-20"
  last_updated: "2025-08-20"
  description: "Phase 12: GCP CI/CD統合設定・レガシー改良版"
  
  # 設定変更履歴
  changelog:
    - version: "12.0.0"
      date: "2025-08-20"
      changes:
        - "初期版作成"
        - "レガシーシステム設定継承"
        - "段階的デプロイ設定統合"
        - "監視・セキュリティ設定追加"