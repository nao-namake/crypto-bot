"""
特徴量順序管理システム
Phase 2: 97特徴量最適化システム対応

目的:
- XGBoost/RandomForestのfeature_names mismatchエラー解決
- 97特徴量の決定論的順序管理
- 学習・予測間の一貫性保証
"""

import json
import logging
from pathlib import Path
from typing import List, Optional

import pandas as pd

logger = logging.getLogger(__name__)


class FeatureOrderManager:
    """
    特徴量順序の決定論的管理クラス

    機能:
    - 97特徴量の固定順序定義
    - 学習時の特徴量順序記録
    - 予測時の特徴量順序整合
    - 特徴量順序の検証・ログ出力
    """

    # Phase 2: 127→97特徴量最適化（重複特徴量30個削除）
    FEATURE_ORDER_97 = [
        # 基本OHLCV特徴量
        "open",
        "high",
        "low",
        "close",
        "volume",
        # ラグ特徴量（最適化：重要な間隔のみ保持）
        "close_lag_1",
        "close_lag_3",
        "volume_lag_1",
        "volume_lag_4",
        "volume_lag_5",
        # リターン特徴量（最適化：log_returnsを削除）
        "returns_1",
        "returns_2",
        "returns_3",
        "returns_5",
        "returns_10",
        # 移動平均（最適化：EMAのみ保持、SMA削除）
        "ema_5",
        "ema_10",
        "ema_20",
        "ema_50",
        "ema_100",
        "ema_200",
        # 価格位置
        "price_position_20",
        "price_position_50",
        "price_vs_sma20",
        "bb_position",
        "intraday_position",
        # ボリンジャーバンド
        "bb_upper",
        "bb_middle",
        "bb_lower",
        "bb_width",
        "bb_squeeze",
        # モメンタム指標（最適化：RSI_14のみ保持）
        "rsi_14",
        "rsi_oversold",
        "rsi_overbought",
        "macd",
        "macd_signal",
        "macd_hist",
        "macd_cross_up",
        "macd_cross_down",
        "stoch_k",
        "stoch_d",
        "stoch_oversold",
        "stoch_overbought",
        # ボラティリティ（最適化：ATR_14とvolatility_20のみ保持）
        "atr_14",
        "volatility_20",
        # 出来高指標
        "volume_sma_20",
        "volume_ratio",
        "volume_trend",
        "vwap",
        "vwap_distance",
        "obv",
        "obv_sma",
        "cmf",
        "mfi",
        "ad_line",
        # トレンド指標
        "adx_14",
        "plus_di",
        "minus_di",
        "trend_strength",
        "trend_direction",
        "cci_20",
        "williams_r",
        "ultimate_oscillator",
        "momentum_14",
        # マーケット構造
        "support_distance",
        "resistance_distance",
        "support_strength",
        "volume_breakout",
        "price_breakout_up",
        "price_breakout_down",
        # ローソク足パターン
        "doji",
        "hammer",
        "engulfing",
        "pinbar",
        # 統計的特徴量（最適化：zscore, close_std_10のみ保持）
        "zscore",
        "close_std_10",
        # 時系列特徴量（最適化：is_european_session削除）
        "hour",
        "day_of_week",
        "is_weekend",
        "is_asian_session",
        "is_us_session",
        # 追加の技術指標
        "roc_10",
        "roc_20",
        "trix",
        "mass_index",
        "keltner_upper",
        "keltner_lower",
        "donchian_upper",
        "donchian_lower",
        "ichimoku_conv",
        "ichimoku_base",
        # その他の派生特徴量
        "price_efficiency",
        "trend_consistency",
        "volume_price_correlation",
        "volatility_regime",
        "momentum_quality",
        "market_phase",
    ]

    def __init__(self, feature_order_file: Optional[str] = None):
        """
        初期化

        Args:
            feature_order_file: 特徴量順序を保存/読込するファイルパス
        """
        self.feature_order_file = feature_order_file or "config/core/feature_order.json"
        self.stored_order: Optional[List[str]] = None

        # 保存された順序があれば読み込む
        self._load_stored_order()

        logger.info("🔧 FeatureOrderManager initialized")
        logger.info(f"  - Default order: {len(self.FEATURE_ORDER_97)} features")
        logger.info(f"  - Storage file: {self.feature_order_file}")

    def _load_stored_order(self):
        """保存された特徴量順序を読み込む"""
        try:
            path = Path(self.feature_order_file)
            if path.exists():
                with open(path, "r") as f:
                    data = json.load(f)
                    self.stored_order = data.get("feature_order", [])
                    logger.info(
                        f"✅ Loaded stored feature order: "
                        f"{len(self.stored_order)} features"
                    )
            else:
                logger.info("📝 No stored feature order found, using default")
        except Exception as e:
            logger.error(f"❌ Failed to load feature order: {e}")
            self.stored_order = None

    def save_feature_order(self, features: List[str]):
        """
        特徴量順序を保存（学習時に使用）

        Args:
            features: 学習時の特徴量リスト
        """
        # Phase H.29.6: feature_order.json完全保護システム
        import os
        import sys

        # 包括的テスト環境検出
        is_test_env = (
            "pytest" in os.environ.get("_", "")
            or "PYTEST_CURRENT_TEST" in os.environ
            or "test" in str(self.feature_order_file).lower()
            or "temp" in str(self.feature_order_file).lower()
            or "/tmp/" in str(self.feature_order_file)
            or "unittest" in sys.modules
            or any("test" in arg.lower() for arg in sys.argv)
            or os.environ.get("CI") == "true"  # CI環境検出
        )

        # 本番feature_order.json完全保護
        is_production_file = str(self.feature_order_file) in [
            "feature_order.json",
            "config/core/feature_order.json",
        ]

        if is_production_file and not is_test_env:
            # 本番環境での97特徴量以外の書き込み完全拒否
            if len(features) != 97:
                logger.warning(
                    f"🛡️ [PROTECTION] Rejected saving {len(features)} features "
                    f"to production feature_order.json (must be exactly 97)"
                )
                return

            # 97特徴量の内容検証
            if not self._validate_97_feature_integrity(features):
                logger.error(
                    "🛡️ [PROTECTION] Rejected invalid 97-feature content "
                    "to production feature_order.json"
                )
                return

        # テスト環境での少数特徴量保護
        if not is_test_env and len(features) < 100:
            logger.warning(
                f"🛡️ [PROTECTION] Rejected saving {len(features)} features "
                f"(< 100) to protect production system"
            )
            return
        try:
            data = {
                "feature_order": features,
                "num_features": len(features),
                "timestamp": pd.Timestamp.now().isoformat(),
            }

            with open(self.feature_order_file, "w") as f:
                json.dump(data, f, indent=2)

            self.stored_order = features
            logger.info(f"✅ Saved feature order: {len(features)} features")

            # 順序の最初と最後を表示
            if len(features) > 10:
                logger.info(f"  First 5: {features[:5]}")
                logger.info(f"  Last 5: {features[-5:]}")
            else:
                logger.info(f"  Features: {features}")

        except Exception as e:
            logger.error(f"❌ Failed to save feature order: {e}")

    def _validate_97_feature_integrity(self, features: List[str]) -> bool:
        """
        Phase 2: 97特徴量システムの整合性検証

        Args:
            features: 検証する特徴量リスト

        Returns:
            True if valid 97-feature system
        """
        try:
            # 97特徴量の数量チェック
            if len(features) != 97:
                logger.error(f"Feature count mismatch: {len(features)} != 97")
                return False

            # 必須特徴量の存在チェック
            essential_features = [
                "open",
                "high",
                "low",
                "close",
                "volume",
                "rsi_14",
                "ema_20",
                "atr_14",
                "macd",
            ]

            missing_essential = [f for f in essential_features if f not in features]
            if missing_essential:
                logger.error(f"Missing essential features: {missing_essential}")
                return False

            # FEATURE_ORDER_97との適合性チェック（80%以上一致）
            feature_set = set(features)
            target_set = set(self.FEATURE_ORDER_97)
            overlap = len(feature_set.intersection(target_set))
            overlap_ratio = overlap / 97

            if overlap_ratio < 0.8:  # 80%未満は拒否
                logger.error(
                    f"Feature overlap too low: {overlap_ratio:.2%} "
                    f"(need ≥80% with FEATURE_ORDER_97)"
                )
                return False

            logger.info(
                f"✅ 97-feature integrity validated: {overlap_ratio:.2%} overlap"
            )
            return True

        except Exception as e:
            logger.error(f"Feature integrity validation failed: {e}")
            return False

    def get_consistent_order(self, current_features: List[str]) -> List[str]:
        """
        一貫性のある特徴量順序を取得

        Args:
            current_features: 現在の特徴量リスト

        Returns:
            順序調整された特徴量リスト
        """
        # 保存された順序があればそれを使用
        if self.stored_order:
            logger.info(
                f"📋 Using stored feature order ({len(self.stored_order)} features)"
            )
            return self._align_to_stored_order(current_features)

        # なければデフォルト順序を使用
        logger.info("📋 Using default feature order")
        return self._align_to_default_order(current_features)

    def _align_to_stored_order(self, current_features: List[str]) -> List[str]:
        """保存された順序に合わせて整列"""
        current_set = set(current_features)
        stored_set = set(self.stored_order)

        # 共通の特徴量を保存された順序で並べる
        aligned = [f for f in self.stored_order if f in current_set]

        # 新しい特徴量があれば最後に追加
        new_features = current_set - stored_set
        if new_features:
            logger.warning(f"⚠️ New features not in stored order: {new_features}")
            aligned.extend(sorted(new_features))

        # 不足している特徴量を警告
        missing_features = stored_set - current_set
        if missing_features:
            logger.warning(
                f"⚠️ Features in stored order but missing now: {missing_features}"
            )

        logger.info(
            f"✅ Aligned features: {len(aligned)} (was {len(current_features)})"
        )
        return aligned

    def _align_to_default_order(self, current_features: List[str]) -> List[str]:
        """デフォルト順序に合わせて整列"""
        current_set = set(current_features)

        # デフォルト順序に存在する特徴量を抽出
        aligned = [f for f in self.FEATURE_ORDER_97 if f in current_set]

        # デフォルトにない特徴量を追加
        extra_features = current_set - set(self.FEATURE_ORDER_97)
        if extra_features:
            logger.info(
                f"📝 Extra features not in default order: {len(extra_features)}"
            )
            aligned.extend(sorted(extra_features))

        logger.info(f"✅ Aligned to default order: {len(aligned)} features")
        return aligned

    def ensure_column_order(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        DataFrameの列順序を保証

        Args:
            df: 順序調整するDataFrame

        Returns:
            列順序が調整されたDataFrame
        """
        if df.empty:
            return df

        original_columns = list(df.columns)
        ordered_columns = self.get_consistent_order(original_columns)

        # 順序が変わった場合のみ並び替え
        if original_columns != ordered_columns:
            logger.info(
                f"🔄 Reordering columns: "
                f"{len(original_columns)} -> {len(ordered_columns)}"
            )
            df = df[ordered_columns]

            # 変更内容を表示
            if len(ordered_columns) <= 20:
                logger.debug(f"  Original: {original_columns[:10]}...")
                logger.debug(f"  Ordered: {ordered_columns[:10]}...")
        else:
            logger.debug("✅ Column order already consistent")

        return df

    def validate_features(
        self, train_features: List[str], predict_features: List[str]
    ) -> bool:
        """
        学習時と予測時の特徴量を検証

        Args:
            train_features: 学習時の特徴量
            predict_features: 予測時の特徴量

        Returns:
            一致していればTrue
        """
        train_set = set(train_features)
        predict_set = set(predict_features)

        # 完全一致チェック
        if train_set == predict_set and train_features == predict_features:
            logger.info("✅ Feature validation passed: perfect match")
            return True

        # 差分分析
        missing_in_predict = train_set - predict_set
        extra_in_predict = predict_set - train_set

        if missing_in_predict:
            logger.error(f"❌ Features missing in prediction: {missing_in_predict}")
        if extra_in_predict:
            logger.error(f"❌ Extra features in prediction: {extra_in_predict}")

        # 順序の違いをチェック
        common_features = train_set & predict_set
        if common_features:
            train_order = [f for f in train_features if f in common_features]
            predict_order = [f for f in predict_features if f in common_features]

            if train_order != predict_order:
                logger.error("❌ Feature order mismatch detected")
                # 最初の不一致を表示
                for i, (t, p) in enumerate(zip(train_order, predict_order)):
                    if t != p:
                        logger.error(f"  Position {i}: '{t}' vs '{p}'")
                        break

        return False

    # Phase 2: 統一特徴量完全性保証システム
    def ensure_features_completeness(
        self, df: pd.DataFrame, target_count: int = 97
    ) -> pd.DataFrame:
        """
        指定された特徴量数の完全性を保証する統一システム

        Args:
            df: 入力DataFrame
            target_count: 目標特徴量数（デフォルト97）

        Returns:
            正確に指定された数の特徴量を持つDataFrame
        """
        logger.info(
            f"🔍 [Phase 2] Starting feature completeness: {len(df.columns)} → {target_count}"
        )

        try:
            # 現在のシステムに応じた特徴量リストを取得
            target_features = (
                self.FEATURE_ORDER_97
                if target_count == 97
                else self.FEATURE_ORDER_97[:target_count]
            )

            # 基本処理
            current_features = set(df.columns)

            # 共通特徴量を順序に従って選択
            ordered_features = [f for f in target_features if f in current_features]

            # 不足分を0で補完
            missing_count = target_count - len(ordered_features)
            if missing_count > 0:
                logger.info(f"補完が必要: {missing_count}特徴量")
                for i in range(missing_count):
                    feature_name = f"auto_fill_{i:03d}"
                    ordered_features.append(feature_name)
                    df[feature_name] = 0.0

            # 正確な特徴量数に調整
            final_features = ordered_features[:target_count]
            result_df = df[final_features].copy()

            logger.info(
                f"✅ [Phase 2] Feature completeness guaranteed: {len(result_df.columns)} features"
            )
            return result_df

        except Exception as e:
            logger.error(f"❌ [Phase 2] Feature completeness failed: {e}")
            # 緊急フォールバック
            return self._create_fallback_features(df, target_count)

    # 97特徴量システム用のメイン関数
    def ensure_97_features_completeness(self, df: pd.DataFrame) -> pd.DataFrame:
        """97特徴量システム用のメイン関数"""
        return self.ensure_features_completeness(df, target_count=97)

    # Phase 2: 97特徴量システム専用メソッド

    def _create_fallback_features(
        self, df: pd.DataFrame, target_count: int
    ) -> pd.DataFrame:
        """緊急時の特徴量フォールバック（統一版）"""
        logger.warning(f"🚨 Creating emergency fallback with {target_count} features")

        # 基本特徴量を取得
        target_features = (
            self.FEATURE_ORDER_97[:target_count]
            if target_count <= 97
            else self.FEATURE_ORDER_97
        )

        # 不足分を0埋めで作成
        result_df = pd.DataFrame(
            0.0, index=df.index if not df.empty else [0], columns=target_features
        )

        # 利用可能な特徴量をコピー
        for col in df.columns:
            if col in result_df.columns:
                result_df[col] = df[col]

        logger.warning(
            f"🚨 Emergency fallback created: {len(result_df.columns)} features"
        )
        return result_df

    # 97特徴量専用緊急フォールバック

    def _emergency_97_fallback_enhanced(self, df: pd.DataFrame) -> pd.DataFrame:
        """緊急時の97特徴量フォールバック"""
        return self._create_fallback_features(df, 97)


# グローバルインスタンス
_global_feature_order_manager: Optional[FeatureOrderManager] = None


def get_feature_order_manager() -> FeatureOrderManager:
    """グローバルな特徴量順序管理インスタンスを取得"""
    global _global_feature_order_manager
    if _global_feature_order_manager is None:
        _global_feature_order_manager = FeatureOrderManager()
    return _global_feature_order_manager
