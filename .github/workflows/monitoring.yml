# Phase 12: 24時間監視・継続的ヘルスチェックワークフロー
# 
# レガシーシステムの良い部分を継承・改良
# signal_monitor.py・ops_monitor.pyベースの自動監視
# 
# 機能:
# - 24時間継続監視
# - パフォーマンス追跡
# - 異常検知・自動アラート
# - 取引成果分析

name: 24時間監視・ヘルスチェック

on:
  schedule:
    # 15分ごとに実行（24時間監視）
    - cron: '*/15 * * * *'
  
  # 手動実行可能
  workflow_dispatch:
    inputs:
      monitoring_duration:
        description: '監視継続時間（分）'
        required: false
        default: '60'
        type: string
      check_type:
        description: '監視タイプ'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - health-only
          - performance-only
          - trading-only

env:
  PROJECT_ID: my-crypto-bot-project
  REGION: asia-northeast1
  SERVICE_NAME: crypto-bot-service

jobs:
  # ========================================
  # 1. システムヘルスチェック
  # ========================================
  health-check:
    name: システムヘルスチェック
    runs-on: ubuntu-latest
    
    outputs:
      service-status: ${{ steps.health.outputs.status }}
      response-time: ${{ steps.health.outputs.response_time }}
      error-count: ${{ steps.health.outputs.error_count }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install monitoring dependencies
        run: |
          pip install requests pandas numpy aiohttp

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          access_token_lifetime: 600s

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: システム基本ヘルスチェック
        id: health
        run: |
          echo "🏥 システムヘルスチェック開始"
          
          # Cloud Runサービス状況確認
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)' 2>/dev/null || echo "")
          
          if [ -z "$SERVICE_URL" ]; then
            echo "❌ Cloud Runサービスが見つかりません"
            echo "status=DOWN" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "📍 サービスURL: $SERVICE_URL"
          
          # ヘルスエンドポイントチェック（レガシー改良版）
          start_time=$(date +%s%3N)
          
          if curl -f -s --max-time 10 "$SERVICE_URL/health" > /tmp/health_response.json; then
            end_time=$(date +%s%3N)
            response_time=$((end_time - start_time))
            
            echo "✅ ヘルスチェック成功"
            echo "status=UP" >> $GITHUB_OUTPUT
            echo "response_time=${response_time}ms" >> $GITHUB_OUTPUT
            
            # ヘルスレスポンス詳細確認
            if [ -f "/tmp/health_response.json" ]; then
              echo "📊 ヘルス詳細:"
              cat /tmp/health_response.json | jq '.' 2>/dev/null || cat /tmp/health_response.json
            fi
            
          else
            echo "❌ ヘルスチェック失敗"
            echo "status=DOWN" >> $GITHUB_OUTPUT
            echo "response_time=timeout" >> $GITHUB_OUTPUT
          fi

      - name: エラーログ分析（レガシーerror_analyzer.py改良版）
        run: |
          echo "🔍 エラーログ分析開始"
          
          # 過去15分のエラーログ取得
          gcloud logging read \
            "resource.type=\"cloud_run_revision\" AND \
             resource.labels.service_name=\"${{ env.SERVICE_NAME }}\" AND \
             severity >= ERROR AND \
             timestamp >= \"$(date -u -d '15 minutes ago' +%Y-%m-%dT%H:%M:%SZ)\"" \
            --limit=50 \
            --format="json" > /tmp/error_logs.json
          
          error_count=$(cat /tmp/error_logs.json | jq '. | length')
          echo "error_count=$error_count" >> $GITHUB_OUTPUT
          
          if [ "$error_count" -gt 0 ]; then
            echo "⚠️ エラーログ検出: $error_count 件"
            echo "📋 最新エラー:"
            cat /tmp/error_logs.json | jq -r '.[0:3][] | .textPayload // .jsonPayload.message // "No message"' | head -10
          else
            echo "✅ エラーログなし"
          fi

  # ========================================
  # 2. パフォーマンス監視
  # ========================================
  performance-monitoring:
    name: パフォーマンス監視
    runs-on: ubuntu-latest
    needs: health-check
    if: needs.health-check.outputs.service-status == 'UP'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: リソース使用量監視（レガシー改良版）
        run: |
          echo "📊 リソース使用量監視開始"
          
          # CPU・メモリ使用率取得（過去15分）
          gcloud monitoring metrics list \
            --filter="metric.type:run.googleapis.com/container/cpu/utilizations" \
            --format="value(displayName)" | head -5
          
          # メモリ使用量確認
          echo "💾 メモリ使用量監視"
          gcloud logging read \
            "resource.type=\"cloud_run_revision\" AND \
             resource.labels.service_name=\"${{ env.SERVICE_NAME }}\" AND \
             jsonPayload.message~\"Memory\" AND \
             timestamp >= \"$(date -u -d '15 minutes ago' +%Y-%m-%dT%H:%M:%SZ)\"" \
            --limit=10 || echo "メモリ情報取得不可"

      - name: API応答時間監視
        run: |
          echo "⏱️ API応答時間監視"
          
          # サービスURL取得
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          
          # 複数回レスポンス時間測定
          total_time=0
          success_count=0
          
          for i in {1..5}; do
            echo "測定 $i/5..."
            start_time=$(date +%s%3N)
            
            if curl -f -s --max-time 5 "$SERVICE_URL/health" > /dev/null; then
              end_time=$(date +%s%3N)
              response_time=$((end_time - start_time))
              echo "  応答時間: ${response_time}ms"
              total_time=$((total_time + response_time))
              success_count=$((success_count + 1))
            else
              echo "  タイムアウト/エラー"
            fi
            
            sleep 2
          done
          
          if [ $success_count -gt 0 ]; then
            avg_time=$((total_time / success_count))
            echo "📈 平均応答時間: ${avg_time}ms (成功率: $success_count/5)"
            
            # 閾値チェック（3秒 = 3000ms）
            if [ $avg_time -gt 3000 ]; then
              echo "⚠️ 応答時間が閾値超過: ${avg_time}ms > 3000ms"
            else
              echo "✅ 応答時間正常"
            fi
          else
            echo "❌ 全測定失敗"
          fi

  # ========================================
  # 3. 取引監視（レガシーsignal_monitor.py改良版）
  # ========================================
  trading-monitoring:
    name: 取引・シグナル監視
    runs-on: ubuntu-latest
    needs: health-check
    if: needs.health-check.outputs.service-status == 'UP'
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 取引活動監視
        run: |
          echo "💼 取引活動監視開始"
          
          # 取引ログ取得（過去1時間）
          gcloud logging read \
            "resource.type=\"cloud_run_revision\" AND \
             resource.labels.service_name=\"${{ env.SERVICE_NAME }}\" AND \
             (jsonPayload.message~\"注文\" OR jsonPayload.message~\"取引\" OR jsonPayload.message~\"SIGNAL\") AND \
             timestamp >= \"$(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ)\"" \
            --limit=20 \
            --format="json" > /tmp/trading_logs.json
          
          trade_count=$(cat /tmp/trading_logs.json | jq '. | length')
          echo "📊 取引関連ログ数: $trade_count 件"
          
          if [ "$trade_count" -gt 0 ]; then
            echo "📋 最新取引活動:"
            cat /tmp/trading_logs.json | jq -r '.[0:5][] | "\(.timestamp): \(.textPayload // .jsonPayload.message // "No message")"' | head -10
          else
            echo "⚠️ 取引活動なし（1時間以内）"
          fi

      - name: シグナル生成状況確認
        run: |
          echo "📡 シグナル生成状況確認"
          
          # シグナル関連ログ取得
          gcloud logging read \
            "resource.type=\"cloud_run_revision\" AND \
             resource.labels.service_name=\"${{ env.SERVICE_NAME }}\" AND \
             (jsonPayload.message~\"SIGNAL\" OR jsonPayload.message~\"BUY\" OR jsonPayload.message~\"SELL\" OR jsonPayload.message~\"HOLD\") AND \
             timestamp >= \"$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)\"" \
            --limit=10 \
            --format="json" > /tmp/signal_logs.json
          
          signal_count=$(cat /tmp/signal_logs.json | jq '. | length')
          echo "📊 シグナル数: $signal_count 件（30分以内）"
          
          if [ "$signal_count" -eq 0 ]; then
            echo "⚠️ シグナル生成停止の可能性"
          else
            echo "✅ シグナル生成正常"
            echo "📋 最新シグナル:"
            cat /tmp/signal_logs.json | jq -r '.[0:3][] | "\(.timestamp): \(.textPayload // .jsonPayload.message // "No message")"'
          fi

  # ========================================
  # 4. 監視レポート生成・通知
  # ========================================
  monitoring-report:
    name: 監視レポート・通知
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, trading-monitoring]
    if: always()
    
    steps:
      - name: 監視結果サマリー生成
        run: |
          echo "📋 24時間監視レポート生成"
          echo "=================================================="
          echo "実行時間: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=================================================="
          echo ""
          
          # ヘルスチェック結果
          echo "🏥 システムヘルス:"
          echo "  状態: ${{ needs.health-check.outputs.service-status || 'UNKNOWN' }}"
          echo "  応答時間: ${{ needs.health-check.outputs.response-time || 'N/A' }}"
          echo "  エラー数: ${{ needs.health-check.outputs.error-count || 'N/A' }}"
          echo ""
          
          # 全体ステータス判定
          overall_status="OK"
          
          if [ "${{ needs.health-check.outputs.service-status }}" != "UP" ]; then
            overall_status="CRITICAL"
            echo "❌ クリティカル: サービス停止"
          elif [ "${{ needs.health-check.outputs.error-count }}" -gt 5 ]; then
            overall_status="WARNING"
            echo "⚠️ 警告: エラー多発"
          elif [ "${{ needs.health-check.result }}" != "success" ]; then
            overall_status="WARNING"
            echo "⚠️ 警告: ヘルスチェック異常"
          else
            echo "✅ システム正常"
          fi
          
          echo ""
          echo "📊 総合ステータス: $overall_status"
          echo "=================================================="
          
          # ステータス別の推奨アクション
          case "$overall_status" in
            "CRITICAL")
              echo "🚨 緊急対応が必要:"
              echo "  1. サービス状態確認: gcloud run services describe ${{ env.SERVICE_NAME }}"
              echo "  2. ログ確認: gcloud logging read"
              echo "  3. 必要に応じてロールバック実行"
              ;;
            "WARNING")
              echo "⚠️ 注意が必要:"
              echo "  1. エラーログ詳細確認"
              echo "  2. パフォーマンス指標確認"
              echo "  3. 次回デプロイ時に修正検討"
              ;;
            "OK")
              echo "✅ 正常稼働中 - 継続監視"
              ;;
          esac

      - name: Discord通知（クリティカル時のみ）
        if: needs.health-check.outputs.service-status != 'UP'
        run: |
          echo "📢 クリティカル状況のDiscord通知"
          echo "（実際の環境では、Secret ManagerからWebhook URLを取得してDiscord通知）"
          echo "🚨 Phase 12システム監視アラート"
          echo "状態: ${{ needs.health-check.outputs.service-status }}"
          echo "時刻: $(date '+%Y-%m-%d %H:%M:%S UTC')"

# ========================================
# ワークフロー設定
# ========================================

# 同時実行制御（監視の重複実行防止）
concurrency:
  group: monitoring-${{ github.ref }}
  cancel-in-progress: false  # 監視は継続実行

# タイムアウト設定
defaults:
  run:
    timeout-minutes: 10