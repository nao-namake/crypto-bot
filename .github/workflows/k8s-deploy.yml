# =============================================================================
# .github/workflows/k8s-deploy.yml
#   - Kubernetes (GKE/EKS) deployment workflow
#   - Supports both GKE and EKS deployment targets
#   - Uses Helm for deployment management
# =============================================================================
name: Kubernetes Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
    paths:
      - 'k8s/**'
      - '.github/workflows/k8s-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      platform:
        description: 'Kubernetes platform'
        required: true
        default: 'gke'
        type: choice
        options:
        - gke
        - eks

env:
  HELM_VERSION: "3.13.0"
  KUBECTL_VERSION: "1.28.0"

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  validate:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Lint Helm Chart
        run: |
          helm lint k8s/helm/crypto-bot
          echo "✅ Helm chart lint passed"

      - name: Validate Helm Templates
        run: |
          helm template crypto-bot k8s/helm/crypto-bot \
            --values k8s/helm/crypto-bot/values-dev.yaml \
            --debug --dry-run > /tmp/rendered-manifests.yaml
          echo "✅ Helm template validation passed"

      - name: Validate Kubernetes Manifests
        run: |
          # Install kubeval for manifest validation
          curl -sSL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin
          
          # Validate raw manifests
          kubeval k8s/manifests/*.yaml
          
          # Validate rendered Helm templates
          kubeval /tmp/rendered-manifests.yaml
          echo "✅ Kubernetes manifest validation passed"

  # ────────────────────────────────────────────────────────────────────────────
  deploy-gke:
    name: Deploy to GKE
    needs: validate
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.platform == 'gke') ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        environment: 
          - ${{ 
              github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
              (github.ref == 'refs/heads/main' && 'prod') ||
              (github.ref == 'refs/heads/develop' && 'dev') ||
              (startsWith(github.ref, 'refs/tags/v') && 'prod') ||
              'dev'
            }}
    
    environment: ${{ matrix.environment }}-gke
    
    env:
      GKE_CLUSTER: crypto-bot-${{ matrix.environment }}
      GKE_ZONE: asia-northeast1
      NAMESPACE: crypto-bot-${{ matrix.environment }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.1.0
        with:
          version: 'latest'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOYER_SA }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER \
            --zone=$GKE_ZONE \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4.0.0
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy secrets (if in production)
        if: matrix.environment == 'prod'
        run: |
          # Create secrets from GitHub secrets
          kubectl create secret generic crypto-bot-secrets \
            --from-literal=bybit-testnet-api-key="${{ secrets.BYBIT_TESTNET_API_KEY }}" \
            --from-literal=bybit-testnet-api-secret="${{ secrets.BYBIT_TESTNET_API_SECRET }}" \
            --from-literal=bybit-live-api-key="${{ secrets.BYBIT_LIVE_API_KEY }}" \
            --from-literal=bybit-live-api-secret="${{ secrets.BYBIT_LIVE_API_SECRET }}" \
            --from-literal=gcp-credentials-json="${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Helm
        run: |
          # Determine values file
          VALUES_FILE="k8s/helm/crypto-bot/values-${{ matrix.environment }}.yaml"
          if [ ! -f "$VALUES_FILE" ]; then
            VALUES_FILE="k8s/helm/crypto-bot/values.yaml"
          fi
          
          # Set image tag
          IMAGE_TAG="${{ github.sha }}"
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG="${{ github.ref_name }}"
          fi
          
          # Deploy with Helm
          helm upgrade --install crypto-bot k8s/helm/crypto-bot \
            --namespace $NAMESPACE \
            --values $VALUES_FILE \
            --set image.tag=$IMAGE_TAG \
            --set environment=${{ matrix.environment }} \
            --set serviceAccount.annotations."iam\.gke\.io/gcp-service-account"="${{ secrets.GCP_CRYPTO_BOT_SA }}" \
            --wait --timeout=10m

      - name: Verify deployment
        run: |
          echo "📊 Deployment Status:"
          kubectl rollout status deployment/crypto-bot --namespace=$NAMESPACE --timeout=300s
          
          echo "📋 Pod Status:"
          kubectl get pods --namespace=$NAMESPACE -l app.kubernetes.io/name=crypto-bot
          
          echo "🔍 Service Status:"
          kubectl get services --namespace=$NAMESPACE
          
          echo "📊 HPA Status:"
          kubectl get hpa --namespace=$NAMESPACE || echo "HPA not found"

      - name: Run health check
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod \
            -l app.kubernetes.io/name=crypto-bot \
            --namespace=$NAMESPACE \
            --timeout=300s
          
          # Get service endpoint and test health
          SERVICE_IP=$(kubectl get service crypto-bot \
            --namespace=$NAMESPACE \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "")
          
          if [ -n "$SERVICE_IP" ]; then
            echo "🏥 Testing health endpoint: http://$SERVICE_IP/healthz"
            curl -f "http://$SERVICE_IP/healthz" || echo "Health check failed"
          else
            echo "⚠️ LoadBalancer IP not available, testing via port-forward"
            kubectl port-forward service/crypto-bot 8080:80 --namespace=$NAMESPACE &
            sleep 5
            curl -f "http://localhost:8080/healthz" || echo "Health check failed"
            kill %1
          fi

  # ────────────────────────────────────────────────────────────────────────────
  deploy-eks:
    name: Deploy to EKS
    needs: validate
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.platform == 'eks') ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && contains(github.event.head_commit.message, '[eks]'))
    
    strategy:
      matrix:
        environment: 
          - ${{ 
              github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
              (github.ref == 'refs/heads/main' && 'prod') ||
              (github.ref == 'refs/heads/develop' && 'dev') ||
              'dev'
            }}
    
    environment: ${{ matrix.environment }}-eks
    
    env:
      EKS_CLUSTER: crypto-bot-${{ matrix.environment }}
      AWS_REGION: us-west-2
      NAMESPACE: crypto-bot-${{ matrix.environment }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4.0.0
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region $AWS_REGION \
            --name $EKS_CLUSTER

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install AWS Load Balancer Controller (if needed)
        run: |
          # Check if AWS Load Balancer Controller is installed
          if ! kubectl get deployment aws-load-balancer-controller -n kube-system >/dev/null 2>&1; then
            echo "Installing AWS Load Balancer Controller..."
            
            # Add EKS chart repo
            helm repo add eks https://aws.github.io/eks-charts
            helm repo update
            
            # Install AWS Load Balancer Controller
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
              -n kube-system \
              --set clusterName=$EKS_CLUSTER \
              --set serviceAccount.create=false \
              --set serviceAccount.name=aws-load-balancer-controller
          else
            echo "AWS Load Balancer Controller already installed"
          fi

      - name: Create namespace if not exists
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy secrets (if in production)
        if: matrix.environment == 'prod'
        run: |
          # Create secrets from AWS Secrets Manager or GitHub secrets
          kubectl create secret generic crypto-bot-secrets \
            --from-literal=bybit-testnet-api-key="${{ secrets.BYBIT_TESTNET_API_KEY }}" \
            --from-literal=bybit-testnet-api-secret="${{ secrets.BYBIT_TESTNET_API_SECRET }}" \
            --from-literal=bybit-live-api-key="${{ secrets.BYBIT_LIVE_API_KEY }}" \
            --from-literal=bybit-live-api-secret="${{ secrets.BYBIT_LIVE_API_SECRET }}" \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Helm
        run: |
          # Determine values file
          VALUES_FILE="k8s/helm/crypto-bot/values-${{ matrix.environment }}.yaml"
          if [ ! -f "$VALUES_FILE" ]; then
            VALUES_FILE="k8s/helm/crypto-bot/values.yaml"
          fi
          
          # Set image tag
          IMAGE_TAG="${{ github.sha }}"
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG="${{ github.ref_name }}"
          fi
          
          # Deploy with Helm
          helm upgrade --install crypto-bot k8s/helm/crypto-bot \
            --namespace $NAMESPACE \
            --values $VALUES_FILE \
            --set image.tag=$IMAGE_TAG \
            --set environment=${{ matrix.environment }} \
            --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${{ secrets.AWS_CRYPTO_BOT_ROLE_ARN }}" \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"="${{ secrets.AWS_ACM_CERTIFICATE_ARN }}" \
            --wait --timeout=10m

      - name: Verify deployment
        run: |
          echo "📊 Deployment Status:"
          kubectl rollout status deployment/crypto-bot --namespace=$NAMESPACE --timeout=300s
          
          echo "📋 Pod Status:"
          kubectl get pods --namespace=$NAMESPACE -l app.kubernetes.io/name=crypto-bot
          
          echo "🔍 Service Status:"
          kubectl get services --namespace=$NAMESPACE
          
          echo "🌐 Ingress Status:"
          kubectl get ingress --namespace=$NAMESPACE

      - name: Run health check
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod \
            -l app.kubernetes.io/name=crypto-bot \
            --namespace=$NAMESPACE \
            --timeout=300s
          
          # Get ALB endpoint and test health
          ALB_ENDPOINT=$(kubectl get ingress crypto-bot \
            --namespace=$NAMESPACE \
            -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "")
          
          if [ -n "$ALB_ENDPOINT" ]; then
            echo "🏥 Testing health endpoint: https://$ALB_ENDPOINT/healthz"
            curl -f "https://$ALB_ENDPOINT/healthz" || echo "Health check failed"
          else
            echo "⚠️ ALB endpoint not available, testing via port-forward"
            kubectl port-forward service/crypto-bot 8080:80 --namespace=$NAMESPACE &
            sleep 5
            curl -f "http://localhost:8080/healthz" || echo "Health check failed"
            kill %1
          fi

  # ────────────────────────────────────────────────────────────────────────────
  cleanup:
    name: Cleanup on failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-gke, deploy-eks]
    
    steps:
      - name: Cleanup failed deployment
        run: |
          echo "🧹 Cleaning up failed deployment resources..."
          # This could include rolling back Helm releases, cleaning up resources, etc.
          # Implementation depends on specific cleanup requirements