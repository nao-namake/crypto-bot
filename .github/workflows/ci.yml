# =============================================================================
# .github/workflows/ci.yml
#   - Push / PR 時に Lint・Format・UnitTest（coverage）を実行
#   - Bybit Testnet 用 E2E テスト（API キーが無ければスキップ）
#   - Docker イメージのビルド & GitHub Container Registry (GHCR) へのプッシュ
#   - GCP Cloud Run への自動デプロイ
# =============================================================================
name: CI

on:
  push:
    branches: [ main ]
    # セマンティックバージョニングタグ（vX.Y.Z）をプッシュしたときにも起動
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

# ──────────────────────────────────────────────────────────────────────────────
jobs:
  # ────────────────────────────────────────────────────────────────────────────
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    # ここでテストを走らせる Python バージョンを 3.11, 3.12 のみに絞る
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    # Codecov 用のトークンを事前に環境変数へ流し込んでおく
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        # リポジトリをチェックアウト

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        # pip キャッシュを保存・復元することでインストール高速化

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
        # matrix で指定した Python バージョンをセットアップ

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt
        # プロジェクト本体と開発用依存をインストール

      - name: Run lint + unit tests + coverage
        run: ./scripts/checks.sh
        # scripts/checks.sh に書かれた flake8/isort/black/pytest＋coverage コマンドを一括実行

      - name: Upload coverage to Codecov
        if: ${{ env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ env.CODECOV_TOKEN }}
        # CODECOV_TOKEN が設定されていれば coverage を Codecov へアップロード

  # ────────────────────────────────────────────────────────────────────────────
  integration-tests:
    name: Bybit Testnet E2E
    needs: test
    runs-on: ubuntu-latest

    # Bybit Testnet 用のシークレットを環境変数として渡す
    env:
      BYBIT_TESTNET_API_KEY: ${{ secrets.BYBIT_TESTNET_API_KEY }}
      BYBIT_TESTNET_API_SECRET: ${{ secrets.BYBIT_TESTNET_API_SECRET }}

    steps:
      - uses: actions/checkout@v4
        # もう一度チェックアウト（別ジョブなので必要）

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        # E2E も pip キャッシュを使う

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        # E2E テストは Python 3.11 環境で実行

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt
        # E2E 用に同じ依存をインストール

      - name: Make run_e2e.sh executable
        run: chmod +x scripts/run_e2e.sh
        # スクリプトに実行権限を付与

      - name: Skip if BYBIT_TESTNET_API_KEY/SECRET not set
        if: ${{ env.BYBIT_TESTNET_API_KEY == '' || env.BYBIT_TESTNET_API_SECRET == '' }}
        run: |
          echo "Bybit Testnet API Key or Secret not set. Skipping integration tests."
        # シークレットが空文字列の場合は「正常終了（Skip）」で止める

      - name: Run Bybit E2E
        if: ${{ env.BYBIT_TESTNET_API_KEY != '' && env.BYBIT_TESTNET_API_SECRET != '' }}
        run: ./scripts/run_e2e.sh
        # 両方のシークレットが設定されている場合のみ E2E スクリプトを実行

  # ────────────────────────────────────────────────────────────────────────────
  docker-build:
    name: Build & Push Docker Image
    needs: integration-tests
    runs-on: ubuntu-latest

    # GitHub Container Registry 用のトークンを流し込む
    env:
      CR_PAT: ${{ secrets.CR_PAT }}
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/crypto-bot

    steps:
      - uses: actions/checkout@v4
        # コードをチェックアウト

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
        # クロスプラットフォーム向けに QEMU をセットアップ

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Docker Buildx をセットアップしてマルチアーキテクチャビルドに対応

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
        # GHCR への認証

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
        # Docker イメージをビルドし、latest とコミット SHA のタグで GHCR にプッシュ

  # ────────────────────────────────────────────────────────────────────────────
  # 新規ジョブ: GCP Cloud Run への自動デプロイ
  # docker-build ジョブ完了後にイメージを Cloud Run サービスへデプロイします
  deploy:
    name: Deploy to GCP Cloud Run
    needs: docker-build
    runs-on: ubuntu-latest
    env:
      # Docker イメージ名 (GHCR 上のリポジトリ)
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/crypto-bot
      # GCP プロジェクト ID は GitHub Secrets に登録済みのものを使用
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # コードをチェックアウト（デプロイ設定やテンプレート読み込み用）

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
        # サービスアカウント JSON キーで gcloud 認証を行う

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
        # gcloud CLI を指定プロジェクトでセットアップ

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: crypto-bot-service
          image: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          region: asia-northeast1
        # Cloud Run サービスに最新イメージをリリース