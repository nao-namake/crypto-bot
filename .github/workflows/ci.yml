# =============================================================================
# .github/workflows/ci.yml
#   - Push / PR 時に Lint・Format・UnitTest（coverage）を実行
#   - Bybit Testnet 用 E2E テスト（API キーが無ければスキップ）
#   - Docker イメージのビルド & GitHub Container Registry (GHCR) へのプッシュ
#   - GCP Cloud Run への自動デプロイ
# =============================================================================
name: CI

on:
  push:
    branches: [ main ]
    # セマンティックバージョニングタグ（vX.Y.Z）をプッシュしたときにも起動
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# ──────────────────────────────────────────────────────────────────────────────
jobs:
  # ────────────────────────────────────────────────────────────────────────────
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    # ここでテストを走らせる Python バージョンを 3.11, 3.12 のみに絞る
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    # Codecov 用のトークンを事前に環境変数へ流し込んでおく
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        # リポジトリをチェックアウト

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        # pip キャッシュを保存・復元することでインストール高速化

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
        # matrix で指定した Python バージョンをセットアップ

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt
        # プロジェクト本体と開発用依存をインストール

      - name: Run lint + unit tests + coverage
        run: ./scripts/checks.sh
        # scripts/checks.sh に書かれた flake8/isort/black/pytest＋coverage コマンドを一括実行

      - name: Upload coverage to Codecov
        if: ${{ env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ env.CODECOV_TOKEN }}
        # CODECOV_TOKEN が設定されていれば coverage を Codecov へアップロード

  # ────────────────────────────────────────────────────────────────────────────
  integration-tests:
    name: Bybit Testnet E2E
    needs: test
    runs-on: ubuntu-latest

    # Bybit Testnet 用のシークレットを環境変数として渡す
    env:
      BYBIT_TESTNET_API_KEY: ${{ secrets.BYBIT_TESTNET_API_KEY }}
      BYBIT_TESTNET_API_SECRET: ${{ secrets.BYBIT_TESTNET_API_SECRET }}

    steps:
      - uses: actions/checkout@v4
        # もう一度チェックアウト（別ジョブなので必要）

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        # E2E も pip キャッシュを使う

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        # E2E テストは Python 3.11 環境で実行

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt
        # E2E 用に同じ依存をインストール

      - name: Make run_e2e.sh executable
        run: chmod +x scripts/run_e2e.sh
        # スクリプトに実行権限を付与

      - name: Skip if BYBIT_TESTNET_API_KEY/SECRET not set
        if: ${{ env.BYBIT_TESTNET_API_KEY == '' || env.BYBIT_TESTNET_API_SECRET == '' }}
        run: |
          echo "Bybit Testnet API Key or Secret not set. Skipping integration tests."
        # シークレットが空文字列の場合は「正常終了（Skip）」で止める

      - name: Run Bybit E2E
        if: ${{ env.BYBIT_TESTNET_API_KEY != '' && env.BYBIT_TESTNET_API_SECRET != '' }}
        run: ./scripts/run_e2e.sh
        # 両方のシークレットが設定されている場合のみ E2E スクリプトを実行

  # ────────────────────────────────────────────────────────────────────────────
  docker-build:
    name: Build & Push Docker Image
    needs: integration-tests
    runs-on: ubuntu-latest

    # GitHub Container Registry 用のトークンを流し込む
    env:
      CR_PAT: ${{ secrets.CR_PAT }}
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/crypto-bot
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4
        # コードをチェックアウト

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
        # クロスプラットフォーム向けに QEMU をセットアップ

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Docker Buildx をセットアップしてマルチアーキテクチャビルドに対応

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
        # GHCR への認証

      - name: Build and push image to GHCR & Artifact Registry
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64                       # Cloud Run は amd64 単一イメージを期待
          tags: |
            ghcr.io/${{ github.repository_owner }}/crypto-bot:latest
            ghcr.io/${{ github.repository_owner }}/crypto-bot:${{ github.sha }}
            asia-northeast1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/crypto-bot-repo/crypto-bot:latest
            asia-northeast1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/crypto-bot-repo/crypto-bot:${{ github.sha }}

  # ────────────────────────────────────────────────────────────────────────────

  terraform-deploy:
    name: Terraform Apply (dev)
    needs: docker-build
    runs-on: ubuntu-latest
    permissions:
      id-token: write          # Workload Identity Federation
      contents: read
    env:
      # Docker image pushed in the previous job
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/crypto-bot
      # GCP project (secret)
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      TF_VAR_artifact_registry_repo: "crypto-bot-repo"
      TF_VAR_service_name: "crypto-bot-service"
      TF_VAR_image_name: "crypto-bot"
      TF_VAR_mode: "paper"
      TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
      TF_VAR_github_repo: "nao-namake/crypto-bot"
      TF_VAR_project_number: ${{ secrets.GCP_PROJECT_NUMBER }}
      TF_VAR_deployer_sa: ${{ secrets.GCP_DEPLOYER_SA }}

      # ----- Terraform variables -----
      TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_region: "asia-northeast1"
      TF_VAR_image_tag: "${{ github.sha }}"
      TF_ENV_DIR: "infra/envs/dev"   # ← dev 環境を対象に apply
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Authenticate to GCP via Workload Identity Federation ----------
      - name: Auth to GCP (WIF)
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}   # projects/*/locations/global/workloadIdentityPools/*/providers/*
          service_account: ${{ secrets.GCP_DEPLOYER_SA }}              # deployer SA (email)

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      # ---------- Terraform ----------
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform -chdir=${{ env.TF_ENV_DIR }} init -upgrade

      - name: Terraform Plan
        run: terraform -chdir=${{ env.TF_ENV_DIR }} plan -input=false

      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=${{ env.TF_ENV_DIR }} apply -auto-approve -input=false