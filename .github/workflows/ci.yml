# =============================================================================
# .github/workflows/ci.yml
#   - Push / PR 時に Lint・Format・UnitTest（coverage）を実行
#   - Bybit Testnet 用 E2E テスト（API キーが無ければスキップ）
#   - Docker イメージのビルド & Artifact Registry へのプッシュ
#   - GCP Cloud Run への自動デプロイ（Terraform使用）
# =============================================================================
name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

# ──────────────────────────────────────────────────────────────────────────────
jobs:
  # ────────────────────────────────────────────────────────────────────────────
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    # ここでテストを走らせる Python バージョンを 3.11, 3.12 のみに絞る
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    # Codecov 用のトークンを事前に環境変数へ流し込んでおく
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        # リポジトリをチェックアウト

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        # pip キャッシュを保存・復元することでインストール高速化

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
        # matrix で指定した Python バージョンをセットアップ

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt
        # プロジェクト本体と開発用依存をインストール

      - name: Run quality checks & tests
        run: |
          echo ">>> Running full quality checks"
          bash scripts/checks.sh
        # scripts/checks.sh に書かれた flake8/isort/black/pytest＋coverage コマンドを一括実行

      - name: Upload coverage to Codecov
        if: ${{ env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ env.CODECOV_TOKEN }}
        # CODECOV_TOKEN が設定されていれば coverage を Codecov へアップロード

  # ────────────────────────────────────────────────────────────────────────────
  integration-tests:
    name: Bybit Testnet E2E
    needs: test
    runs-on: ubuntu-latest

    # Bybit Testnet 用のシークレットを環境変数として渡す
    env:
      BYBIT_TESTNET_API_KEY: ${{ secrets.BYBIT_TESTNET_API_KEY }}
      BYBIT_TESTNET_API_SECRET: ${{ secrets.BYBIT_TESTNET_API_SECRET }}

    steps:
      - uses: actions/checkout@v4
        # もう一度チェックアウト（別ジョブなので必要）

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        # E2E も pip キャッシュを使う

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        # E2E テストは Python 3.11 環境で実行

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt
        # E2E 用に同じ依存をインストール

      - name: Make run_e2e.sh executable
        run: chmod +x scripts/run_e2e.sh
        # スクリプトに実行権限を付与

      - name: Skip if BYBIT_TESTNET_API_KEY/SECRET not set
        if: ${{ env.BYBIT_TESTNET_API_KEY == '' || env.BYBIT_TESTNET_API_SECRET == '' }}
        run: |
          echo "Bybit Testnet API Key or Secret not set. Skipping integration tests."
        # シークレットが空文字列の場合は「正常終了（Skip）」で止める

      - name: Run Bybit E2E
        if: ${{ env.BYBIT_TESTNET_API_KEY != '' && env.BYBIT_TESTNET_API_SECRET != '' }}
        run: ./scripts/run_e2e.sh
        # 両方のシークレットが設定されている場合のみ E2E スクリプトを実行

  # ────────────────────────────────────────────────────────────────────────────
  docker-build:
    name: Build & Test Docker Image
    needs: integration-tests
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      id-token: write

    # Docker build and test environment
    env:
      IMAGE_NAME: crypto-bot

    steps:
      - uses: actions/checkout@v4
        # コードをチェックアウト

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
        # クロスプラットフォーム向けに QEMU をセットアップ

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # Docker Buildx をセットアップしてマルチアーキテクチャビルドに対応

      # ---------- Authenticate to GCP for Artifact Registry ----------
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOYER_SA }}
          access_token_lifetime: 7200s
          access_token_scopes: |
            https://www.googleapis.com/auth/cloud-platform
            https://www.googleapis.com/auth/devstorage.read_write
            https://www.googleapis.com/auth/artifactregistry.repositories.uploadArtifacts

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure docker for Artifact Registry
        run: gcloud --quiet auth configure-docker asia-northeast1-docker.pkg.dev

      - name: Create Artifact Registry repository if not exists
        run: |
          echo "Checking if Artifact Registry repository exists..."
          if ! gcloud artifacts repositories describe crypto-bot-repo --location=asia-northeast1 --format="value(name)" 2>/dev/null; then
            echo "Creating Artifact Registry repository..."
            gcloud artifacts repositories create crypto-bot-repo \
              --repository-format=docker \
              --location=asia-northeast1 \
              --description="Docker repository for crypto-bot application"
          else
            echo "Artifact Registry repository already exists"
          fi

      # ---------- Build & push to Artifact Registry ----------
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          load: false
          platforms: linux/amd64
          tags: |
            asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/crypto-bot-repo/crypto-bot:latest
            asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/crypto-bot-repo/crypto-bot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      
      - name: Test Docker image
        run: |
          IMAGE_TAG="asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/crypto-bot-repo/crypto-bot:${{ github.sha }}"
          docker pull "${IMAGE_TAG}"
          docker run --rm "${IMAGE_TAG}" python -c "import crypto_bot; print('Docker import test passed')"
          docker run -d --name test-container -p 8080:8080 "${IMAGE_TAG}"
          sleep 10
          curl -f http://localhost:8080/healthz || (echo "Health check failed" && exit 1)
          docker stop test-container
          docker rm test-container
          echo "Docker image tests passed successfully"


  # ────────────────────────────────────────────────────────────────────────────

  # ────────────────────────────────────────────────────────────────────────────
  # Development Environment Deploy (develop branch and PRs)
  # ────────────────────────────────────────────────────────────────────────────
  terraform-deploy-dev:
    name: Deploy to Development
    needs: docker-build
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'pull_request' && github.base_ref == 'develop') ||
      (github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      id-token: write
    env:
      # Docker image pushed in the previous job
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/crypto-bot
      # GCP project (secret)
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      # Development environment specific settings
      TF_VAR_artifact_registry_repo: "crypto-bot-repo"
      TF_VAR_service_name: "crypto-bot-dev"
      TF_VAR_image_name: "crypto-bot"
      TF_VAR_mode: "paper"
      TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
      TF_VAR_github_repo: "nao-namake/crypto-bot"
      TF_VAR_project_number: ${{ secrets.GCP_PROJECT_NUMBER }}
      TF_VAR_deployer_sa: ${{ secrets.GCP_DEPLOYER_SA }}

      # ----- Terraform variables -----
      TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_region: "asia-northeast1"
      TF_VAR_image_tag: "${{ github.sha }}"
      TF_ENV_DIR: "infra/envs/dev"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Authenticate to GCP via Workload Identity Federation ----------
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOYER_SA }}
          access_token_lifetime: 7200s
          access_token_scopes: |
            https://www.googleapis.com/auth/cloud-platform
            https://www.googleapis.com/auth/devstorage.read_write
            https://www.googleapis.com/auth/artifactregistry.repositories.uploadArtifacts

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2


      - name: Set up gcloud for Development
        uses: google-github-actions/setup-gcloud@v2

      # ---------- Terraform ----------
      - name: Set up Terraform for Development
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5

      - name: Terraform Init (Development)
        run: terraform -chdir=${{ env.TF_ENV_DIR }} init -upgrade

      - name: Terraform Plan (Development)
        run: terraform -chdir=${{ env.TF_ENV_DIR }} plan -input=false

      - name: Terraform Apply (Development)
        run: terraform -chdir=${{ env.TF_ENV_DIR }} apply -auto-approve -input=false

  # ────────────────────────────────────────────────────────────────────────────
  # Production Environment Deploy (main branch only)
  # ────────────────────────────────────────────────────────────────────────────
  terraform-deploy-prod:
    name: Deploy to Production
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      id-token: write
    env:
      # Docker image pushed in the previous job
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/crypto-bot
      # GCP project (secret)
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      # Production environment specific settings
      TF_VAR_artifact_registry_repo: "crypto-bot-repo"
      TF_VAR_service_name: "crypto-bot-prod"
      TF_VAR_image_name: "crypto-bot"
      TF_VAR_mode: "live"
      TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
      TF_VAR_github_repo: "nao-namake/crypto-bot"
      TF_VAR_project_number: ${{ secrets.GCP_PROJECT_NUMBER }}
      TF_VAR_deployer_sa: ${{ secrets.GCP_DEPLOYER_SA }}

      # ----- Terraform variables -----
      TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_region: "asia-northeast1"
      TF_VAR_image_tag: "${{ github.sha }}"
      TF_ENV_DIR: "infra/envs/prod"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Authenticate to GCP via Workload Identity Federation ----------
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOYER_SA }}
          access_token_lifetime: 7200s
          access_token_scopes: |
            https://www.googleapis.com/auth/cloud-platform
            https://www.googleapis.com/auth/devstorage.read_write
            https://www.googleapis.com/auth/artifactregistry.repositories.uploadArtifacts

      - name: Set up gcloud for Production
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up gcloud for Production Deploy
        uses: google-github-actions/setup-gcloud@v2

      # ---------- Terraform ----------
      - name: Set up Terraform for Production
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5

      - name: Terraform Init (Production)
        run: terraform -chdir=${{ env.TF_ENV_DIR }} init -upgrade

      - name: Terraform Plan (Production)
        run: terraform -chdir=${{ env.TF_ENV_DIR }} plan -input=false

      - name: Terraform Apply (Production)
        run: terraform -chdir=${{ env.TF_ENV_DIR }} apply -auto-approve -input=false

  # ────────────────────────────────────────────────────────────────────────────
  # マルチリージョンHA環境デプロイ（タグ作成時のみ）
  # ────────────────────────────────────────────────────────────────────────────
  terraform-deploy-ha:
    name: Deploy to HA Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    needs: [test, integration-tests, docker-build]
    
    env:
      TF_ENV_DIR: infra/envs/ha-prod
      
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOYER_SA }}
          access_token_lifetime: 7200s
          access_token_scopes: |
            https://www.googleapis.com/auth/cloud-platform
            https://www.googleapis.com/auth/devstorage.read_write
            https://www.googleapis.com/auth/artifactregistry.repositories.uploadArtifacts

      - name: Set up Cloud SDK for HA
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Cloud SDK for HA Deploy
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Terraform for HA
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5

      - name: Extract tag version
        id: tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Terraform Init (HA)
        run: terraform -chdir=${{ env.TF_ENV_DIR }} init

      - name: Create terraform.tfvars
        run: |
          cat > ${{ env.TF_ENV_DIR }}/terraform.tfvars << EOF
          project_id              = "${{ vars.GCP_PROJECT_ID }}"
          project_number          = "${{ vars.GCP_PROJECT_NUMBER }}"
          primary_region          = "asia-northeast1"
          secondary_region        = "us-central1"
          enable_secondary_region = true
          enable_load_balancer    = true
          enable_ssl              = false
          enable_public_access    = true
          enable_uptime_check     = true
          service_name            = "crypto-bot-ha"
          image_name              = "crypto-bot"
          image_tag               = "${{ steps.tag.outputs.VERSION }}"
          mode                    = "live"
          cpu_limit               = "2000m"
          memory_limit            = "1Gi"
          min_instances           = "2"
          max_instances           = "20"
          alert_emails            = ["admin@example.com"]
          github_repo             = "${{ github.repository }}"
          deployer_sa             = "github-deployer@${{ vars.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          latency_threshold_ms    = 3000
          error_rate_threshold    = 1.0
          loss_threshold          = -5000
          EOF

      - name: Terraform Plan (HA)
        run: terraform -chdir=${{ env.TF_ENV_DIR }} plan -input=false

      - name: Terraform Apply (HA)
        run: terraform -chdir=${{ env.TF_ENV_DIR }} apply -auto-approve -input=false
      
      - name: Get Load Balancer IP
        id: lb_ip
        run: |
          LB_IP=$(terraform -chdir=${{ env.TF_ENV_DIR }} output -raw load_balancer_ip || echo "")
          echo "IP=${LB_IP}" >> $GITHUB_OUTPUT
      
      - name: Wait for deployment
        run: |
          echo "Waiting for HA deployment to be ready..."
          sleep 60  # Wait for deployment to propagate
          
      - name: Health check
        run: |
          PRIMARY_URL=$(terraform -chdir=${{ env.TF_ENV_DIR }} output -raw primary_service_url)
          SECONDARY_URL=$(terraform -chdir=${{ env.TF_ENV_DIR }} output -raw secondary_service_url)
          
          echo "Testing primary region health..."
          curl -f "${PRIMARY_URL}/healthz" || exit 1
          
          if [ -n "$SECONDARY_URL" ]; then
            echo "Testing secondary region health..."
            curl -f "${SECONDARY_URL}/healthz" || exit 1
          fi
          
          if [ -n "${{ steps.lb_ip.outputs.IP }}" ]; then
            echo "Testing load balancer health..."
            curl -f "http://${{ steps.lb_ip.outputs.IP }}/healthz" || exit 1
          fi
          
          echo "✅ HA deployment health check passed!"

      - name: Post deployment summary
        run: |
          echo "### 🚀 HA Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.tag.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Primary Region:** asia-northeast1" >> $GITHUB_STEP_SUMMARY
          echo "**Secondary Region:** us-central1" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          PRIMARY_URL=$(terraform -chdir=${{ env.TF_ENV_DIR }} output -raw primary_service_url)
          SECONDARY_URL=$(terraform -chdir=${{ env.TF_ENV_DIR }} output -raw secondary_service_url)
          DASHBOARD_URL=$(terraform -chdir=${{ env.TF_ENV_DIR }} output -raw dashboard_url)
          
          echo "**Endpoints:**" >> $GITHUB_STEP_SUMMARY
          echo "- Primary: ${PRIMARY_URL}" >> $GITHUB_STEP_SUMMARY
          if [ -n "$SECONDARY_URL" ]; then
            echo "- Secondary: ${SECONDARY_URL}" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ steps.lb_ip.outputs.IP }}" ]; then
            echo "- Load Balancer: http://${{ steps.lb_ip.outputs.IP }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- Monitoring Dashboard: ${DASHBOARD_URL}" >> $GITHUB_STEP_SUMMARY
