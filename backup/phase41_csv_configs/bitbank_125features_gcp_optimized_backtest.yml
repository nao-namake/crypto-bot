# =============================================================================
# ファイル名: config/validation/bitbank_125features_gcp_optimized_backtest.yml
# 説明:
# GCP Cloud Run最適化・125特徴量システム対応バックテスト設定
# - Cloud Run環境完全対応：メモリ・CPU・タイムアウト制限考慮
# - ローカル・GCP環境差最小化：設定統一・外部API無効化徹底
# - 本番production.yml基準：125特徴量・アンサンブル学習・リスク管理完全踏襲
# =============================================================================

# ----------------------------------------------------------------------
# データ取得設定（GCP Cloud Run最適化）
# ----------------------------------------------------------------------
data:
  exchange: csv  # CSV モードを指定（GCP環境との差異最小化）
  symbol: BTC/USD  # CSVファイルのシンボル（BitbankはBTC/JPYだがCSVはUSD）
  timeframe: 1h
  
  # CSV ファイル指定
  csv_path: /Users/nao/Desktop/bot/data/btc_usd_2024_hourly.csv
  
  # 半年間バックテスト：詳細戦略分析用
  since: "2024-01-01T00:00:00Z"
  limit: 4380  # 半年分（182.5日 × 24時間）
  
  # Cloud Run環境制限対応（production.yml準拠）
  paginate: true
  per_page: 200    # production.yml準拠：200
  since_hours: 96  # production.yml準拠：96時間
  weekend_data: true
  fetch_retries: 3
  adaptive_rate_limit: true
  
  # メモリ効率化設定（Cloud Run 2GB制限対応）
  max_consecutive_empty: 8     # production.yml: 12→8に効率化
  max_consecutive_no_new: 15   # production.yml: 20→15に効率化
  max_attempts: 20             # production.yml: 25→20に効率化
  exponential_backoff: true
  min_delay_ms: 15000          # production.yml: 30000→15000に高速化
  max_delay_ms: 30000          # production.yml: 45000→30000に高速化
  
  # マルチタイムフレーム対応データ設定（GCP最適化）
  multi_timeframe_data:
    base_timeframe: "1h"
    target_timeframes:
      15m:
        method: "interpolation"
        min_points: 8            # production.yml: 10→8に効率化
      1h:
        method: "direct"
        min_points: 8            # production.yml: 10→8に効率化
      4h:
        method: "aggregation"
        min_points: 6            # production.yml: 8→6に効率化
        api_fetch: false
  
  # API設定は完全無効化（GCP環境との差異防止）
  api_key: null
  api_secret: null
  ccxt_options: {}

# ----------------------------------------------------------------------
# 品質監視設定（GCP環境最適化）
# ----------------------------------------------------------------------
quality_monitoring:
  enabled: true
  default_threshold: 0.3       # 30%ルール維持
  emergency_stop_threshold: 0.35
  target_threshold: 0.6
  max_threshold: 0.8
  
  # 品質ベース取引調整（Cloud Run対応）
  low_quality_mode:
    position_size_reduction: 0.5
    confidence_boost: 0.1
    stop_loss_tightening: 0.8
    
  medium_quality_mode:
    position_size_reduction: 0.8
    confidence_boost: 0.03
    stop_loss_tightening: 0.95
  
  high_quality_mode:
    position_size_reduction: 1.0
    confidence_boost: 0.0
    stop_loss_tightening: 1.0

# ----------------------------------------------------------------------
# リスク管理（production.yml完全踏襲・GCP対応）
# ----------------------------------------------------------------------
risk:
  risk_per_trade: 0.005        # production.yml準拠：0.5%
  stop_atr_mult: 1.2          # production.yml準拠：1.2
  kelly_criterion:
    enabled: true             # production.yml準拠：有効
    max_fraction: 0.05        # production.yml準拠：5%
  
  # ATR期間最適化（production.yml準拠）
  atr_period: 20              # production.yml準拠：20期間

# ----------------------------------------------------------------------
# バックテスト設定（GCP運用想定）
# ----------------------------------------------------------------------
backtest:
  starting_balance: 10000.0   # 1万円（小額テスト想定）
  slippage_rate: 0.0012       # Bitbank実測値（0.12%）
  commission_rate: 0.0012     # Bitbankテイカー手数料（0.12%）
  maker_commission_rate: -0.0002  # Bitbankメイカーリベート（-0.02%）
  trade_log_csv: "./results/trade_log_125features_6month_analysis.csv"
  aggregate_out_prefix: "./results/aggregate_125features_6month"

# ----------------------------------------------------------------------
# ウォークフォワード分割（GCP Cloud Run最適化）
# ----------------------------------------------------------------------
walk_forward:
  train_window: 360      # 15日間学習（720→360に効率化）
  test_window: 120       # 5日間テスト（168→120に効率化）
  step: 24               # 1日間隔でスライド（維持）

# ----------------------------------------------------------------------
# 機械学習（production.yml完全踏襲・GCP最適化）
# ----------------------------------------------------------------------
ml:
  feat_period: 14              # production.yml準拠
  lags: [1,2,3]               # production.yml準拠：効率向上
  rolling_window: 10          # production.yml準拠：即座取引開始対応
  horizon: 5                  # production.yml準拠
  target_type: classification # production.yml準拠
  model_type: lgbm           # production.yml準拠
  
  # アンサンブル学習設定（production.yml完全準拠）
  ensemble:
    enabled: true
    method: trading_stacking
    confidence_threshold: 0.60    # production.yml準拠：Phase H.15最適化済み
    risk_adjustment: true
    models: ["lgbm", "xgb", "rf"] # production.yml準拠：3モデル
    model_weights: [0.5, 0.3, 0.2] # production.yml準拠：性能ベース重み
    
  # 外部データ設定（production.yml準拠・完全無効化）
  external_data:
    enabled: false              # production.yml準拠：Phase H.27無効化
    cache_enabled: false        # GCP最適化：キャッシュ無効化
    fallback_enabled: true
    include_in_features: false  # production.yml準拠：完全除外
    
    vix:
      enabled: false            # production.yml準拠：無効化
      symbol: "^VIX"
      timeframe: "1d"
      fallback_level: 20.0
      
    macro:
      enabled: false            # production.yml準拠：無効化
      symbols:
        dxy: "DX-Y.NYB"
        us10y: "^TNX"
        us2y: "^IRX"
      fallback_values:
        dxy: 103.0
        us10y: 4.5
        us2y: 4.8
        
    funding:
      enabled: false            # production.yml準拠：無効化
      symbol: "BTC/USDT"
      exchanges: ["binance"]
      fallback_rate: 0.0001

  # 125特徴量システム（production.yml完全踏襲）
  extra_features:
    # ラグ特徴量 (10個)
    - close_lag_1
    - close_lag_2
    - close_lag_3
    - close_lag_4
    - close_lag_5
    - volume_lag_1
    - volume_lag_2
    - volume_lag_3
    - volume_lag_4
    - volume_lag_5
    
    # リターン特徴量 (10個)
    - returns_1
    - returns_2
    - returns_3
    - returns_5
    - returns_10
    - log_returns_1
    - log_returns_2
    - log_returns_3
    - log_returns_5
    - log_returns_10
    
    # 移動平均 (12個)
    - sma_5
    - sma_10
    - sma_20
    - sma_50
    - sma_100
    - sma_200
    - ema_5
    - ema_10
    - ema_20
    - ema_50
    - ema_100
    - ema_200
    
    # 価格位置 (5個)
    - price_position_20
    - price_position_50
    - price_vs_sma20
    - bb_position
    - intraday_position
    
    # ボリンジャーバンド (5個)
    - bb_upper
    - bb_middle
    - bb_lower
    - bb_width
    - bb_squeeze
    
    # モメンタム指標 (14個) - production.yml準拠
    - rsi_14
    - rsi_7
    - rsi_21
    - rsi_oversold
    - rsi_overbought
    - macd
    - macd_signal
    - macd_hist
    - macd_cross_up
    - macd_cross_down
    - stoch_k
    - stoch_d
    - stoch_oversold
    - stoch_overbought
    
    # ボラティリティ (8個)
    - atr_14
    - atr_7
    - atr_21
    - volatility_20
    - volatility_50
    - high_low_ratio
    - true_range
    - volatility_ratio
    
    # 出来高指標 (10個)
    - volume_sma_20
    - volume_ratio
    - volume_trend
    - vwap
    - vwap_distance
    - obv
    - obv_sma
    - cmf
    - mfi
    - ad_line
    
    # トレンド指標 (8個)
    - adx_14
    - plus_di
    - minus_di
    - trend_strength
    - trend_direction
    - cci_20
    - williams_r
    - ultimate_oscillator
    
    # マーケット構造 (6個)
    - support_distance
    - resistance_distance
    - support_strength
    - volume_breakout
    - price_breakout_up
    - price_breakout_down
    
    # ローソク足パターン (4個)
    - doji
    - hammer
    - engulfing
    - pinbar
    
    # 統計的特徴量 (5個)
    - skewness_20
    - kurtosis_20
    - zscore
    - mean_reversion_20
    - mean_reversion_50
    
    # 時系列特徴量 (6個)
    - hour
    - day_of_week
    - is_weekend
    - is_asian_session
    - is_european_session
    - is_us_session
    
    # 高度指標 (22個)
    - momentum_14
    - roc_14
    - srsi_k
    - srsi_d
    - trix
    - kst
    - cmo
    - ppo
    - ppo_signal
    - ppo_hist
    - ift_rsi
    - cti
    - wt1
    - wt2
    - ui
    - tci
    - ap
    - hlc3
    - ohlc4
    - typical_price
    - weighted_close
    - dpo

# ----------------------------------------------------------------------
# ライブトレード設定（GCP Cloud Run対応）
# ----------------------------------------------------------------------
live:
  mode: backtest  # バックテストモード
  trade_interval: 60            # production.yml準拠：60秒
  min_order_size: 0.0001       # production.yml準拠
  max_order_size: 0.0005       # production.yml準拠
  starting_balance: 10000.0    # production.yml準拠
  
  # 信用取引設定（production.yml準拠）
  margin_trading:
    enabled: true              # production.yml準拠：有効
    leverage: 1.0             # production.yml準拠：1倍
    position_type: "both"     # production.yml準拠：両建て
    force_margin_mode: true   # production.yml準拠
    verify_margin_status: true # production.yml準拠
  
  # Bitbank固有設定（production.yml準拠）
  bitbank_settings:
    min_btc_amount: 0.0001
    max_retries: 3
    retry_delay: 5

# ----------------------------------------------------------------------
# 戦略設定（production.yml準拠）
# ----------------------------------------------------------------------
strategy:
  type: single
  name: ml
  params:
    model_path: models/production/model.pkl
    threshold: 0.02            # Phase H.15最適化済み
    
    # 動的閾値調整
    atr_multiplier: 0.5
    volatility_adjustment: true
    threshold_bounds: [0.01, 0.25]

# ----------------------------------------------------------------------
# 監視・レポート設定（GCP Cloud Logging最適化）
# ----------------------------------------------------------------------
monitoring:
  enabled: true
  check_interval: 300  # 5分間隔
  
  # Cloud Logging最適化：重要メトリクスのみ
  metrics:
    - total_return
    - sharpe_ratio
    - max_drawdown
    - win_rate
    - profit_factor
    - trade_count

# GCP Cloud Run対応設定
cloud_run_optimization:
  # メモリ使用量最適化
  memory_limit: "2Gi"
  cpu_limit: "1000m"
  
  # タイムアウト対応
  execution_timeout: 300       # Cloud Run制限：300秒
  batch_processing: true       # 大量データを小分け処理
  
  # ログ出力最適化（Cloud Logging対応）
  logging:
    level: "INFO"              # デバッグログ抑制
    structured: true           # JSON構造化ログ
    reduce_verbose: true       # 冗長ログ削減

# 外部データリトライ設定（production.yml準拠・無効化状態）
external_data_retry:
  max_retries: 3
  retry_delay: 2
  exponential_backoff: true
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    recovery_timeout: 300

# ----------------------------------------------------------------------
# 🎯 GCP Cloud Run最適化125特徴量バックテスト期待効果
# ----------------------------------------------------------------------
# この設定による特徴:
# 
# ☁️ GCP Cloud Run完全対応:
# - メモリ制限2GB対応: 効率化されたデータ処理・小刻み学習
# - CPU制限1vCPU対応: 軽量化されたモデル学習・並列処理最適化
# - 実行時間制限300秒対応: バッチ処理・段階的実行
# - Cloud Logging対応: 構造化ログ・重要情報集約
# 
# 🔄 ローカル・GCP環境差最小化:
# - 外部API完全無効化: ネットワーク依存排除・環境差解消
# - CSV基準データ処理: API制限・レート制限回避
# - 設定統一: production.yml基準・動作保証
# 
# 📈 125特徴量システム完全移植:
# - 全特徴量production.yml準拠: ローカルテスト結果の再現性保証
# - アンサンブル学習システム: 3モデル統合・重み・閾値完全一致
# - リスク管理システム: Kelly基準・ATR・ポジションサイズ完全移植
# 
# 📊 期待結果:
# - ローカル性能のGCP完全再現: 99%以上の結果一致
# - メモリ効率95%以上: 2GB制限内での安定動作
# - 実行時間最適化: 300秒制限内でのバックテスト完了
# - デプロイ準備完了: ローカル成功→GCP即座デプロイ可能
# ----------------------------------------------------------------------